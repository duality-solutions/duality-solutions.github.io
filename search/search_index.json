{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Duality Blockchain Solutions LLC What is Duality? \u201cDuality\u201d is a community-driven project that emerged during the 2014 altcoin boom and took its final form in 2017 as Duality Blockchain Solutions LLC. We at Duality believe that real innovation happens at the fringe by real people with pragmatic answers and prompt implementations to fundamental problems. Duality, as a social construct, aspires to evolve by staying true to its roots. Our Mission Duality Blockchain Solutions contributes towards society by offering BaaS (Blockchain as a Service). Our Vision To secure end-user purchasing power and identity with blockchain technology. Our Values To provide financial sovereignty and improve societal standards in a world of increasing austerity. Documentation Guide Under Technology you can find our major improvements we have added to Dynamic. Next you see Documentation which shows you certain guides with the Dynamic and Sequence blockchains. Finally you have the about section which hosts everything else such as license, faqs, etc. Here is an index of the different PDF documents which we include in documentation: Dynamic Bootstrap Instructions How to Setup Dynode Guide How to Setup Sequence Staking using a Raspberry Pi Guide KYC Announcement SEQ Guide - How to split coins for better staking About This document and guide repository is a mkdocs project built with mkdocs-material . You can view an active version here . We included the mkdocs.yml file here in the repository for you to create it on your own if you wish. Get in Touch Discord Twitter Github Contact","title":"Home"},{"location":"#duality-blockchain-solutions-llc","text":"","title":"Duality Blockchain Solutions LLC"},{"location":"#what-is-duality","text":"\u201cDuality\u201d is a community-driven project that emerged during the 2014 altcoin boom and took its final form in 2017 as Duality Blockchain Solutions LLC. We at Duality believe that real innovation happens at the fringe by real people with pragmatic answers and prompt implementations to fundamental problems. Duality, as a social construct, aspires to evolve by staying true to its roots.","title":"What is Duality?"},{"location":"#our-mission","text":"Duality Blockchain Solutions contributes towards society by offering BaaS (Blockchain as a Service).","title":"Our Mission"},{"location":"#our-vision","text":"To secure end-user purchasing power and identity with blockchain technology.","title":"Our Vision"},{"location":"#our-values","text":"To provide financial sovereignty and improve societal standards in a world of increasing austerity.","title":"Our Values"},{"location":"#documentation-guide","text":"Under Technology you can find our major improvements we have added to Dynamic. Next you see Documentation which shows you certain guides with the Dynamic and Sequence blockchains. Finally you have the about section which hosts everything else such as license, faqs, etc. Here is an index of the different PDF documents which we include in documentation: Dynamic Bootstrap Instructions How to Setup Dynode Guide How to Setup Sequence Staking using a Raspberry Pi Guide KYC Announcement SEQ Guide - How to split coins for better staking","title":"Documentation Guide"},{"location":"#about","text":"This document and guide repository is a mkdocs project built with mkdocs-material . You can view an active version here . We included the mkdocs.yml file here in the repository for you to create it on your own if you wish.","title":"About"},{"location":"#get-in-touch","text":"Discord Twitter Github Contact","title":"Get in Touch"},{"location":"Dynamic Initialisation Arguments/","text":"DYNAMIC INITIALISATION ARGUMENTS OPTIONS \"-version\" (\"Print version and exit\") \"-alerts\" (\"Receive and display P2P network alerts (default: true)\") \"-alertnotify=[cmd]\" (\"Execute command when a relevant alert is received or we see a really long fork\") \"-blocknotify=[cmd]\" (\"Execute command when the best block changes\") \"-blocksonly\" (\"Whether to operate in a blocks only mode (default: false)\") \"-checkblocks=[n]\" (\"How many blocks to check at startup (default: 0, 0 = all)\") \"-checklevel=[n]\" (\"How thorough the block verification of -checkblocks is (0-4)\") \"-conf=[file]\" (\"Specify configuration file\") \"-daemon\" (\"Run in the background as a daemon and accept commands\") \"-datadir=[dir]\" (\"Specify data directory\") \"-dbcache=[n]\" (\"Set database cache size in megabytes\") \"-loadblock=[file]\" (\"Imports blocks from external blk000??.dat file on startup\") \"-maxorphantx=[n]\" (\"Keep at most [n] unconnectable transactions in memory\") \"-maxmempool=[n]\" (\"Keep the transaction memory pool below [n] megabytes\") \"-mempoolexpiry=[n]\" (\"Do not keep transactions in the mempool longer than [n] hours\") \"-par=[n]\" (\"Set the number of script verification threads (0 = auto)\") \"-pid=[file]\" (\"Specify pid file\") \"-prune=[n]\" (\"Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. \" \"Warning: Reverting this setting requires re-downloading the entire blockchain. \" \"(default: 0 = disable pruning blocks\") \"-reindex-chainstate\" (\"Rebuild chain state from the currently indexed blocks\") \"-reindex\" (\"Rebuild chain state and block index from the blk*.dat files on disk\") \"-sysperms\" (\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\") \"-txindex\" (\"Maintain a full transaction index, used by the getrawtransaction rpc call\") \"-addressindex\" (\"Maintain a full address index, used to query for the balance, txids and unspent outputs for addresses\") \"-timestampindex\" (\"Maintain a timestamp index for block hashes, used to query blocks hashes by a range of timestamps\") \"-spentindex\" (\"Maintain a full spent index, used to query the spending txid and input index for an outpoint\") CONNECTION OPTIONS \"-addnode=[ip]\" (\"Add a node to connect to and attempt to keep the connection open\") \"-banscore=[n]\" (\"Threshold for disconnecting misbehaving peers\") \"-bantime=[n]\" (\"Number of seconds to keep misbehaving peers from reconnecting\") \"-bind=[addr]\" (\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\") \"-connect=[ip]\" (\"Connect only to the specified node(s)\") \"-discover\" (\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\") \"-dns\" (\"Allow DNS lookups for -addnode, -seednode and -connect\") \"-dnsseed\" (\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect)\") \"-externalip=[ip]\" (\"Specify your own public address\") \"-forcednsseed\" (\"Always query for peer addresses via DNS lookup\") \"-listen\" (\"Accept connections from outside (default: 1 if no -proxy or -connect)\") \"-listenonion\" (\"Automatically create Tor hidden service\") \"-maxconnections=[n]\" (\"Maintain at most [n] connections to peers (temporary service connections excluded)\") \"-maxreceivebuffer=[n]\" (\"Maximum per-connection receive buffer, [n]*1000 bytes\") \"-maxsendbuffer=[n]\" (\"Maximum per-connection send buffer, [n]*1000 bytes\") \"-onion=[ip:port]\" (\"Use separate SOCKS5 proxy to reach peers via Tor hidden services\") \"-onlynet=[net]\" (\"Only connect to nodes in network [net] (ipv4, ipv6 or onion)\") \"-permitbaremultisig\" (\"Relay non-P2SH multisig\") \"-peerbloomfilters\" (\"Support filtering of blocks and transaction with bloom filters\") \"-enforcenodebloom\" (\"Enforce minimum protocol version to limit use of bloom filters\") \"-port=[port]\" (\"Listen for connections on [port]\") \"-proxy=[ip:port]\" (\"Connect through SOCKS5 proxy\") \"-proxyrandomize\" (\"Randomize credentials for every proxy connection. This enables Tor stream isolation\") \"-seednode=[ip]\" (\"Connect to a node to retrieve peer addresses, and disconnect\") \"-timeout=[n]\" (\"Specify connection timeout in milliseconds (minimum: 1)\") \"-torcontrol=[ip]:[port]\" (\"Tor control port to use if onion listening enabled\") \"-torpassword=[pass]\" (\"Tor control port password (default: empty)\") \"-upnp\" (\"Use UPnP to map the listening port (default: 1 when listening and no -proxy)\") \"-whitebind=[addr]\" (\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\") \"-whitelist=[netmask]\" (\"Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times.\") + \" \" + (\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\") \"-whitelistrelay\" (\"Accept relayed transactions received from whitelisted peers even when not relaying transactions\") \"-whitelistforcerelay\" (\"Force relay of transactions from whitelisted peers even they violate local relay policy\") \"-maxuploadtarget=[n]\" (\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit\") WALLET OPTIONS \"-disablewallet\"(\"Do not load the wallet and disable wallet RPC calls\") \"-keypool=[n]\" (\"Set key pool size to [n]\") \"-fallbackfee=[amt]\" (\"A fee rate (in kB) that will be used when fee estimation has insufficient data\"), \"-mintxfee=[amt]\" (\"Fees (in kB) smaller than this are considered zero fee for transaction creation\"), \"-paytxfee=[amt]\" (\"Fee (in kB) to add to transactions you send\"), \"-rescan\" (\"Rescan the block chain for missing wallet transactions on startup\") \"-salvagewallet\" (\"Attempt to recover private keys from a corrupt wallet.dat on startup\") \"-sendfreetransactions\" (\"Send transactions as zero-fee transactions if possible\") \"-spendzeroconfchange\" (\"Spend unconfirmed change when sending transactions\") \"-txconfirmtarget=[n]\" (\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks\") \"-maxtxfee=[amt]\" (\"Maximum total fees to use in a single wallet transaction setting this too low may abort large transactions\"), \"-usehd\" (\"Use hierarchical deterministic key generation (HD) after bip32. Only has effect during wallet creation/first start\") \"-mnemonic\" (\"User defined mnemonic for HD wallet (bip39). Only has effect during wallet creation/first start (default: randomly generated)\") \"-mnemonicpassphrase\" (\"User defined memonic passphrase for HD wallet (bip39). Only has effect during wallet creation/first start (default: randomly generated)\") \"-hdseed\" (\"User defined seed for HD wallet (should be in hex). Only has effect during wallet creation/first start (default: randomly generated)\") \"-upgradewallet\" (\"Upgrade wallet to latest format on startup\") \"-wallet=[file]\" (\"Specify wallet file (within data directory)\") \"-walletbroadcast\" (\"Make the wallet broadcast transactions\") \"-walletnotify=[cmd]\" (\"Execute command when a wallet transaction changes (string in cmd is replaced by TxID)\") \"-zapwallettxes=[mode]\" (\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") + \" \" + (\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\") \"-createwalletbackups=[n]\" (\"Number of automatic wallet backups\") \"-walletbackupsdir=[dir]\" (\"Specify full path to directory for automatic wallet backups (must exist)\") \"-keepass\" (\"Use KeePass 2 integration using KeePassHttp plugin\") \"-keepassport=[port]\" (\"Connect to KeePassHttp on port [port]\") \"-keepasskey=[key]\" (\"KeePassHttp key for AES encrypted communication with KeePass\") \"-keepassid=[name]\" (\"KeePassHttp id for the established association\") \"-keepassname=[name]\" (\"Name to construct url for KeePass entry that stores the wallet passphrase\") \"-windowtitle=[name]\" (\"Wallet window title\") ZEROMQ NOTIFICATION OPTIONS \"-zmqpubhashblock=[address]\" (\"Enable publish hash block in [address]\") \"-zmqpubhashtx=[address]\" (\"Enable publish hash transaction in [address]\") \"-zmqpubhashtxlock=[address]\" (\"Enable publish hash transaction (locked via InstantSend) in [address]\") \"-zmqpubrawblock=[address]\" (\"Enable publish raw block in [address]\") \"-zmqpubrawtx=[address]\" (\"Enable publish raw transaction in [address]\") \"-zmqpubrawtxlock=[address]\" (\"Enable publish raw transaction (locked via InstantSend) in [address]\") DEBUGGING TESTING OPTIONS \"-uacomment=[cmt]\" (\"Append comment to the user agent string\") \"-checkblockindex\" (\"Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive and mapBlocksUnlinked occasionally. Also sets -checkmempool\") \"-checkmempool=[n]\" (\"Run checks every [n] transactions\") \"-checkpoints\" (\"Disable expensive verification for known chain history\") \"-dblogsize=[n]\" (\"Flush wallet database activity from memory to disk log every [n] megabytes\") \"-disablesafemode\" (\"Disable safemode, override a real safe mode event\") \"-testsafemode\" (\"Force safe mode\") \"-dropmessagestest=[n]\" (\"Randomly drop 1 of every [n] network messages\") \"-fuzzmessagestest=[n]\" (\"Randomly fuzz 1 of every [n] network messages\") \"-flushwallet\" (\"Run a thread to flush wallet periodically\") \"-stopafterblockimport\" (\"Stop running after importing blocks from disk\") \"-limitancestorcount=[n]\" (\"Do not accept transactions if number of in-mempool ancestors is [n] or more\") \"-limitancestorsize=[n]\" (\"Do not accept transactions whose size with all in-mempool ancestors exceeds [n] kilobytes\") \"-limitdescendantcount=[n]\" (\"Do not accept transactions if any ancestor would have [n] or more in-mempool descendants\") \"-limitdescendantsize=[n]\" (\"Do not accept transactions if any ancestor would have more than [n] kilobytes of in-mempool descendants.\") debug Categories are \"addrman, alert, bench, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, qt, rand, reindex, rpc, selectcoins, tor, zmq, Dynamic (or specifically: privatesend, instantsend, dynode, spork, keepass, dnpayments, gobject)\" \"-debug=[category]\" (\"Output debugging information (supplying [category] is optional)\") + (\"If [category] is not supplied or if [category] = 1, output all debugging information.\") + (\"[category] can be:\") \"-nodebug\" (\"Turn off debugging messages, same as -debug=0\") \"-gen\" (\"Generate coins\") \"-genproclimit=[n]\" (\"Set the number of threads for coin generation if enabled (-1 = all cores)\") \"-help-debug\" (\"Show all debugging options (usage: --help -help-debug)\") \"-logips\" (\"Include IP addresses in debug output\") \"-logtimestamps\" (\"Prepend debug output with timestamp\") \"-logtimemicros\" (\"Add microsecond precision to debug timestamps\") \"-logthreadnames\" (\"Add thread names to debug messages\") \"-mocktime=[n]\", (\"Replace actual time with [n] seconds since epoch\") \"-limitfreerelay=[n]\" (\"Continuously rate-limit free transactions to [n]*1000 bytes per minute\") \"-relaypriority\" (\"Require high priority for relaying free or low-fee transactions\") \"-maxsigcachesize=[n]\" (\"Limit size of signature cache to [n] MiB\") \"-minrelaytxfee=[amt]\" (\"Fees (in kB) smaller than this are considered zero fee for relaying, mining and transaction creation\"), \"-printtoconsole\" (\"Send trace/debug info to console instead of debug.log file\") \"-printtodebuglog\" (\"Send trace/debug info to debug.log file\") \"-printpriority\" (\"Log transaction priority and fee per kB when mining blocks\") \"-privdb\" (\"Sets the DB_PRIVATE flag in the wallet db environment\") \"-shrinkdebugfile\" (\"Shrink debug.log file on client startup (default: 1 when no -debug)\") \"-litemode=[n]\" (\"Disable all Dynamic specific functionality (Dynodes, PrivateSend, InstantSend, Governance) (0-1)\") DYNODE OPTIONS \"-dynode=[n]\" (\"Enable the client to act as a Dynode (0-1)\") \"-dnconf=[file]\" (\"Specify Dynode configuration file\", \"dynode.conf\") \"-dnconflock=[n]\" (\"Lock Dynodes from Dynode configuration file\") \"-dynodeprivkey=[n]\" (\"Set the Dynode private key\") PRIVATESEND OPTIONS \"-enableprivatesend=[n]\" (\"Enable use of automated PrivateSend for funds stored in this wallet (0-1)\") \"-privatesendmultisession=[n]\" (\"Enable multiple PrivateSend mixing sessions per block, experimental (0-1)\") \"-privatesendrounds=[n]\" (\"Use N separate Dynodes for each denominated input to mix funds (2-16)\") \"-privatesendamount=[n]\" (\"Keep N DYN anonymized\") \"-liquidityprovider=[n]\" (\"Provide liquidity to PrivateSend by infrequently mixing coins on a continual basis (0-100, 1=very frequent, high fees, 100=very infrequent, low fees)\") INSTANTSEND OPTIONS \"-enableinstantsend=[n]\" (\"Enable InstantSend, show confirmations for locked transactions (0-1)\") \"-instantsenddepth=[n]\" (\"Show N confirmations for a successfully locked transaction (0-9999)\") \"-instantsendnotify=[cmd]\" (\"Execute command when a wallet InstantSend transaction is successfully locked\") NODE RELAY OPTIONS \"-acceptnonstdtxn\" (\"Relay and mine \\\"non-standard\\\" transactions\", \"testnet/regtest only \") \"-bytespersigop\" (\"Minimum bytes per sigop in transactions we relay and mine\") \"-datacarrier\" (\"Relay and mine data carrier transactions\") \"-datacarriersize\" (\"Maximum size of data in data carrier transactions we relay and mine\") \"-mempoolreplacement\" (\"Enable transaction replacement in the memory pool\") BLOCK CREATION OPTIONS \"-blockminsize=[n]\" (\"Set minimum block size in bytes\") \"-blockmaxsize=[n]\" (\"Set maximum block size in bytes\") \"-blockprioritysize=[n]\" (\"Set maximum size of high-priority/low-fee transactions in bytes\") \"-blockversion=[n]\" (\"Override block version to test forking scenarios\") RPC SERVER OPTIONS \"-server\" (\"Accept command line and JSON-RPC commands\") \"-rest\" (\"Accept public REST requests\") \"-rpcbind=[addr]\" (\"Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6. This option can be specified multiple times (default: bind to all interfaces)\") \"-rpccookiefile=[loc]\" (\"Location of the auth cookie (default: data dir)\") \"-rpcuser=[user]\" (\"Username for JSON-RPC connections\") \"-rpcpassword=[pw]\" (\"Password for JSON-RPC connections\") \"-rpcauth=[userpw]\" (\"Username and hashed password for JSON-RPC connections. The field [userpw] comes in the format: [USERNAME]:[SALT]$[HASH]. A canonical python script is included in share/rpcuser. This option can be specified multiple times\") \"-rpcport=[port]\" (\"Listen for JSON-RPC connections on [port]\") \"-rpcallowip=[ip]\" (\"Allow JSON-RPC connections from specified source. Valid for [ip] are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\") \"-rpcthreads=[n]\" (\"Set the number of threads to service RPC calls\") \"-rpcworkqueue=[n]\" (\"Set the depth of the work queue to service RPC calls\") \"-rpcservertimeout=[n]\" (\"Timeout during HTTP requests\")","title":"Dynamic Initialisation Arguments"},{"location":"Dynamic Initialisation Arguments/#dynamic-initialisation-arguments","text":"","title":"DYNAMIC INITIALISATION ARGUMENTS"},{"location":"Dynamic Initialisation Arguments/#options","text":"\"-version\" (\"Print version and exit\") \"-alerts\" (\"Receive and display P2P network alerts (default: true)\") \"-alertnotify=[cmd]\" (\"Execute command when a relevant alert is received or we see a really long fork\") \"-blocknotify=[cmd]\" (\"Execute command when the best block changes\") \"-blocksonly\" (\"Whether to operate in a blocks only mode (default: false)\") \"-checkblocks=[n]\" (\"How many blocks to check at startup (default: 0, 0 = all)\") \"-checklevel=[n]\" (\"How thorough the block verification of -checkblocks is (0-4)\") \"-conf=[file]\" (\"Specify configuration file\") \"-daemon\" (\"Run in the background as a daemon and accept commands\") \"-datadir=[dir]\" (\"Specify data directory\") \"-dbcache=[n]\" (\"Set database cache size in megabytes\") \"-loadblock=[file]\" (\"Imports blocks from external blk000??.dat file on startup\") \"-maxorphantx=[n]\" (\"Keep at most [n] unconnectable transactions in memory\") \"-maxmempool=[n]\" (\"Keep the transaction memory pool below [n] megabytes\") \"-mempoolexpiry=[n]\" (\"Do not keep transactions in the mempool longer than [n] hours\") \"-par=[n]\" (\"Set the number of script verification threads (0 = auto)\") \"-pid=[file]\" (\"Specify pid file\") \"-prune=[n]\" (\"Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. \" \"Warning: Reverting this setting requires re-downloading the entire blockchain. \" \"(default: 0 = disable pruning blocks\") \"-reindex-chainstate\" (\"Rebuild chain state from the currently indexed blocks\") \"-reindex\" (\"Rebuild chain state and block index from the blk*.dat files on disk\") \"-sysperms\" (\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\") \"-txindex\" (\"Maintain a full transaction index, used by the getrawtransaction rpc call\") \"-addressindex\" (\"Maintain a full address index, used to query for the balance, txids and unspent outputs for addresses\") \"-timestampindex\" (\"Maintain a timestamp index for block hashes, used to query blocks hashes by a range of timestamps\") \"-spentindex\" (\"Maintain a full spent index, used to query the spending txid and input index for an outpoint\")","title":"OPTIONS"},{"location":"Dynamic Initialisation Arguments/#connection-options","text":"\"-addnode=[ip]\" (\"Add a node to connect to and attempt to keep the connection open\") \"-banscore=[n]\" (\"Threshold for disconnecting misbehaving peers\") \"-bantime=[n]\" (\"Number of seconds to keep misbehaving peers from reconnecting\") \"-bind=[addr]\" (\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\") \"-connect=[ip]\" (\"Connect only to the specified node(s)\") \"-discover\" (\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\") \"-dns\" (\"Allow DNS lookups for -addnode, -seednode and -connect\") \"-dnsseed\" (\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect)\") \"-externalip=[ip]\" (\"Specify your own public address\") \"-forcednsseed\" (\"Always query for peer addresses via DNS lookup\") \"-listen\" (\"Accept connections from outside (default: 1 if no -proxy or -connect)\") \"-listenonion\" (\"Automatically create Tor hidden service\") \"-maxconnections=[n]\" (\"Maintain at most [n] connections to peers (temporary service connections excluded)\") \"-maxreceivebuffer=[n]\" (\"Maximum per-connection receive buffer, [n]*1000 bytes\") \"-maxsendbuffer=[n]\" (\"Maximum per-connection send buffer, [n]*1000 bytes\") \"-onion=[ip:port]\" (\"Use separate SOCKS5 proxy to reach peers via Tor hidden services\") \"-onlynet=[net]\" (\"Only connect to nodes in network [net] (ipv4, ipv6 or onion)\") \"-permitbaremultisig\" (\"Relay non-P2SH multisig\") \"-peerbloomfilters\" (\"Support filtering of blocks and transaction with bloom filters\") \"-enforcenodebloom\" (\"Enforce minimum protocol version to limit use of bloom filters\") \"-port=[port]\" (\"Listen for connections on [port]\") \"-proxy=[ip:port]\" (\"Connect through SOCKS5 proxy\") \"-proxyrandomize\" (\"Randomize credentials for every proxy connection. This enables Tor stream isolation\") \"-seednode=[ip]\" (\"Connect to a node to retrieve peer addresses, and disconnect\") \"-timeout=[n]\" (\"Specify connection timeout in milliseconds (minimum: 1)\") \"-torcontrol=[ip]:[port]\" (\"Tor control port to use if onion listening enabled\") \"-torpassword=[pass]\" (\"Tor control port password (default: empty)\") \"-upnp\" (\"Use UPnP to map the listening port (default: 1 when listening and no -proxy)\") \"-whitebind=[addr]\" (\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\") \"-whitelist=[netmask]\" (\"Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times.\") + \" \" + (\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\") \"-whitelistrelay\" (\"Accept relayed transactions received from whitelisted peers even when not relaying transactions\") \"-whitelistforcerelay\" (\"Force relay of transactions from whitelisted peers even they violate local relay policy\") \"-maxuploadtarget=[n]\" (\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit\")","title":"CONNECTION OPTIONS"},{"location":"Dynamic Initialisation Arguments/#wallet-options","text":"\"-disablewallet\"(\"Do not load the wallet and disable wallet RPC calls\") \"-keypool=[n]\" (\"Set key pool size to [n]\") \"-fallbackfee=[amt]\" (\"A fee rate (in kB) that will be used when fee estimation has insufficient data\"), \"-mintxfee=[amt]\" (\"Fees (in kB) smaller than this are considered zero fee for transaction creation\"), \"-paytxfee=[amt]\" (\"Fee (in kB) to add to transactions you send\"), \"-rescan\" (\"Rescan the block chain for missing wallet transactions on startup\") \"-salvagewallet\" (\"Attempt to recover private keys from a corrupt wallet.dat on startup\") \"-sendfreetransactions\" (\"Send transactions as zero-fee transactions if possible\") \"-spendzeroconfchange\" (\"Spend unconfirmed change when sending transactions\") \"-txconfirmtarget=[n]\" (\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks\") \"-maxtxfee=[amt]\" (\"Maximum total fees to use in a single wallet transaction setting this too low may abort large transactions\"), \"-usehd\" (\"Use hierarchical deterministic key generation (HD) after bip32. Only has effect during wallet creation/first start\") \"-mnemonic\" (\"User defined mnemonic for HD wallet (bip39). Only has effect during wallet creation/first start (default: randomly generated)\") \"-mnemonicpassphrase\" (\"User defined memonic passphrase for HD wallet (bip39). Only has effect during wallet creation/first start (default: randomly generated)\") \"-hdseed\" (\"User defined seed for HD wallet (should be in hex). Only has effect during wallet creation/first start (default: randomly generated)\") \"-upgradewallet\" (\"Upgrade wallet to latest format on startup\") \"-wallet=[file]\" (\"Specify wallet file (within data directory)\") \"-walletbroadcast\" (\"Make the wallet broadcast transactions\") \"-walletnotify=[cmd]\" (\"Execute command when a wallet transaction changes (string in cmd is replaced by TxID)\") \"-zapwallettxes=[mode]\" (\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") + \" \" + (\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\") \"-createwalletbackups=[n]\" (\"Number of automatic wallet backups\") \"-walletbackupsdir=[dir]\" (\"Specify full path to directory for automatic wallet backups (must exist)\") \"-keepass\" (\"Use KeePass 2 integration using KeePassHttp plugin\") \"-keepassport=[port]\" (\"Connect to KeePassHttp on port [port]\") \"-keepasskey=[key]\" (\"KeePassHttp key for AES encrypted communication with KeePass\") \"-keepassid=[name]\" (\"KeePassHttp id for the established association\") \"-keepassname=[name]\" (\"Name to construct url for KeePass entry that stores the wallet passphrase\") \"-windowtitle=[name]\" (\"Wallet window title\")","title":"WALLET OPTIONS"},{"location":"Dynamic Initialisation Arguments/#zeromq-notification-options","text":"\"-zmqpubhashblock=[address]\" (\"Enable publish hash block in [address]\") \"-zmqpubhashtx=[address]\" (\"Enable publish hash transaction in [address]\") \"-zmqpubhashtxlock=[address]\" (\"Enable publish hash transaction (locked via InstantSend) in [address]\") \"-zmqpubrawblock=[address]\" (\"Enable publish raw block in [address]\") \"-zmqpubrawtx=[address]\" (\"Enable publish raw transaction in [address]\") \"-zmqpubrawtxlock=[address]\" (\"Enable publish raw transaction (locked via InstantSend) in [address]\")","title":"ZEROMQ NOTIFICATION OPTIONS"},{"location":"Dynamic Initialisation Arguments/#debugging-testing-options","text":"\"-uacomment=[cmt]\" (\"Append comment to the user agent string\") \"-checkblockindex\" (\"Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive and mapBlocksUnlinked occasionally. Also sets -checkmempool\") \"-checkmempool=[n]\" (\"Run checks every [n] transactions\") \"-checkpoints\" (\"Disable expensive verification for known chain history\") \"-dblogsize=[n]\" (\"Flush wallet database activity from memory to disk log every [n] megabytes\") \"-disablesafemode\" (\"Disable safemode, override a real safe mode event\") \"-testsafemode\" (\"Force safe mode\") \"-dropmessagestest=[n]\" (\"Randomly drop 1 of every [n] network messages\") \"-fuzzmessagestest=[n]\" (\"Randomly fuzz 1 of every [n] network messages\") \"-flushwallet\" (\"Run a thread to flush wallet periodically\") \"-stopafterblockimport\" (\"Stop running after importing blocks from disk\") \"-limitancestorcount=[n]\" (\"Do not accept transactions if number of in-mempool ancestors is [n] or more\") \"-limitancestorsize=[n]\" (\"Do not accept transactions whose size with all in-mempool ancestors exceeds [n] kilobytes\") \"-limitdescendantcount=[n]\" (\"Do not accept transactions if any ancestor would have [n] or more in-mempool descendants\") \"-limitdescendantsize=[n]\" (\"Do not accept transactions if any ancestor would have more than [n] kilobytes of in-mempool descendants.\") debug Categories are \"addrman, alert, bench, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, qt, rand, reindex, rpc, selectcoins, tor, zmq, Dynamic (or specifically: privatesend, instantsend, dynode, spork, keepass, dnpayments, gobject)\" \"-debug=[category]\" (\"Output debugging information (supplying [category] is optional)\") + (\"If [category] is not supplied or if [category] = 1, output all debugging information.\") + (\"[category] can be:\") \"-nodebug\" (\"Turn off debugging messages, same as -debug=0\") \"-gen\" (\"Generate coins\") \"-genproclimit=[n]\" (\"Set the number of threads for coin generation if enabled (-1 = all cores)\") \"-help-debug\" (\"Show all debugging options (usage: --help -help-debug)\") \"-logips\" (\"Include IP addresses in debug output\") \"-logtimestamps\" (\"Prepend debug output with timestamp\") \"-logtimemicros\" (\"Add microsecond precision to debug timestamps\") \"-logthreadnames\" (\"Add thread names to debug messages\") \"-mocktime=[n]\", (\"Replace actual time with [n] seconds since epoch\") \"-limitfreerelay=[n]\" (\"Continuously rate-limit free transactions to [n]*1000 bytes per minute\") \"-relaypriority\" (\"Require high priority for relaying free or low-fee transactions\") \"-maxsigcachesize=[n]\" (\"Limit size of signature cache to [n] MiB\") \"-minrelaytxfee=[amt]\" (\"Fees (in kB) smaller than this are considered zero fee for relaying, mining and transaction creation\"), \"-printtoconsole\" (\"Send trace/debug info to console instead of debug.log file\") \"-printtodebuglog\" (\"Send trace/debug info to debug.log file\") \"-printpriority\" (\"Log transaction priority and fee per kB when mining blocks\") \"-privdb\" (\"Sets the DB_PRIVATE flag in the wallet db environment\") \"-shrinkdebugfile\" (\"Shrink debug.log file on client startup (default: 1 when no -debug)\") \"-litemode=[n]\" (\"Disable all Dynamic specific functionality (Dynodes, PrivateSend, InstantSend, Governance) (0-1)\")","title":"DEBUGGING TESTING OPTIONS"},{"location":"Dynamic Initialisation Arguments/#dynode-options","text":"\"-dynode=[n]\" (\"Enable the client to act as a Dynode (0-1)\") \"-dnconf=[file]\" (\"Specify Dynode configuration file\", \"dynode.conf\") \"-dnconflock=[n]\" (\"Lock Dynodes from Dynode configuration file\") \"-dynodeprivkey=[n]\" (\"Set the Dynode private key\")","title":"DYNODE OPTIONS"},{"location":"Dynamic Initialisation Arguments/#privatesend-options","text":"\"-enableprivatesend=[n]\" (\"Enable use of automated PrivateSend for funds stored in this wallet (0-1)\") \"-privatesendmultisession=[n]\" (\"Enable multiple PrivateSend mixing sessions per block, experimental (0-1)\") \"-privatesendrounds=[n]\" (\"Use N separate Dynodes for each denominated input to mix funds (2-16)\") \"-privatesendamount=[n]\" (\"Keep N DYN anonymized\") \"-liquidityprovider=[n]\" (\"Provide liquidity to PrivateSend by infrequently mixing coins on a continual basis (0-100, 1=very frequent, high fees, 100=very infrequent, low fees)\")","title":"PRIVATESEND OPTIONS"},{"location":"Dynamic Initialisation Arguments/#instantsend-options","text":"\"-enableinstantsend=[n]\" (\"Enable InstantSend, show confirmations for locked transactions (0-1)\") \"-instantsenddepth=[n]\" (\"Show N confirmations for a successfully locked transaction (0-9999)\") \"-instantsendnotify=[cmd]\" (\"Execute command when a wallet InstantSend transaction is successfully locked\")","title":"INSTANTSEND OPTIONS"},{"location":"Dynamic Initialisation Arguments/#node-relay-options","text":"\"-acceptnonstdtxn\" (\"Relay and mine \\\"non-standard\\\" transactions\", \"testnet/regtest only \") \"-bytespersigop\" (\"Minimum bytes per sigop in transactions we relay and mine\") \"-datacarrier\" (\"Relay and mine data carrier transactions\") \"-datacarriersize\" (\"Maximum size of data in data carrier transactions we relay and mine\") \"-mempoolreplacement\" (\"Enable transaction replacement in the memory pool\")","title":"NODE RELAY OPTIONS"},{"location":"Dynamic Initialisation Arguments/#block-creation-options","text":"\"-blockminsize=[n]\" (\"Set minimum block size in bytes\") \"-blockmaxsize=[n]\" (\"Set maximum block size in bytes\") \"-blockprioritysize=[n]\" (\"Set maximum size of high-priority/low-fee transactions in bytes\") \"-blockversion=[n]\" (\"Override block version to test forking scenarios\")","title":"BLOCK CREATION OPTIONS"},{"location":"Dynamic Initialisation Arguments/#rpc-server-options","text":"\"-server\" (\"Accept command line and JSON-RPC commands\") \"-rest\" (\"Accept public REST requests\") \"-rpcbind=[addr]\" (\"Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6. This option can be specified multiple times (default: bind to all interfaces)\") \"-rpccookiefile=[loc]\" (\"Location of the auth cookie (default: data dir)\") \"-rpcuser=[user]\" (\"Username for JSON-RPC connections\") \"-rpcpassword=[pw]\" (\"Password for JSON-RPC connections\") \"-rpcauth=[userpw]\" (\"Username and hashed password for JSON-RPC connections. The field [userpw] comes in the format: [USERNAME]:[SALT]$[HASH]. A canonical python script is included in share/rpcuser. This option can be specified multiple times\") \"-rpcport=[port]\" (\"Listen for JSON-RPC connections on [port]\") \"-rpcallowip=[ip]\" (\"Allow JSON-RPC connections from specified source. Valid for [ip] are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\") \"-rpcthreads=[n]\" (\"Set the number of threads to service RPC calls\") \"-rpcworkqueue=[n]\" (\"Set the depth of the work queue to service RPC calls\") \"-rpcservertimeout=[n]\" (\"Timeout during HTTP requests\")","title":"RPC SERVER OPTIONS"},{"location":"Dynamic OSX Build Guide/","text":"Mac OS X Build Instructions and Notes This guide will show you how to build dynamicd (headless client) for OSX. Notes Tested on OS X 10.7 through 10.12.6 on 64-bit Intel processors only. All of the commands should be executed in a Terminal application. The built-in one is located in /Applications/Utilities . Preparation You need to install XCode with all the options checked so that the compiler and everything is available in /usr not just /Developer. XCode should be available on your OS X installation media, but if not, you can get the current version from https://developer.apple.com/xcode/. If you install Xcode 4.3 or later, you'll need to install its command line tools. This can be done in Xcode > Preferences > Downloads > Components and generally must be re-done or updated every time Xcode is updated. There's also an assumption that you already have git installed. If not, it's the path of least resistance to install Github for Mac (OS X 10.7+) or Git for OS X . It is also available via Homebrew. You will also need to install Homebrew in order to install library dependencies. The installation of the actual dependencies is covered in the Instructions sections below. Instructions: Homebrew Install dependencies using Homebrew $ brew install git autoconf automake libevent libtool boost --c++11 miniupnpc openssl pkg-config qt berkeley-db4 $ brew install homebrew/versions/protobuf260 --c++11 Because of OS X having LibreSSL installed we have to tell the compiler where OpenSSL is located: $ export LDFLAGS=-L/usr/local/opt/openssl/lib $ export CPPFLAGS=-I/usr/local/opt/openssl/include or you can instead symlink your newly installed OpenSSL: $ sudo ln -s openssl-1.0.2j /usr/local/openssl (the above version of OpenSSL may differ to the one you have installed, amend to suit) After exiting you will want to symlink berkeley-db4 and qt: $ brew link berkeley-db4 --force $ brew link qt --force $ brew link boost --c++11 --force Building dynamicd Clone the github tree to get the source code and go into the directory. git clone https://github.com/duality-solutions/dynamic.git cd dynamic Build dynamicd: ./autogen.sh ./configure make It is also a good idea to build and run the unit tests: make check (Optional) You can also install dynamicd to your path: make install Use Qt Creator as IDE You can use Qt Creator as IDE, for debugging and for manipulating forms, etc. Download Qt Creator from http://www.qt.io/download/. Download the \"community edition\" and only install Qt Creator (uncheck the rest during the installation process). Make sure you installed everything through homebrew mentioned above Do a proper ./configure --with-gui=qt5 --enable-debug In Qt Creator do \"New Project\" -> Import Project -> Import Existing Project Enter \"dynamic-qt\" as project name, enter src/qt as location Leave the file selection as it is Confirm the \"summary page\" In the \"Projects\" tab select \"Manage Kits...\" Select the default \"Desktop\" kit and select \"Clang (x86 64bit in /usr/bin)\" as compiler Select LLDB as debugger (you might need to set the path to your installtion) Start debugging with Qt Creator Creating a release build You can ignore this section if you are building dynamicd for your own use. dynamicd/dynamic-cli binaries are not included in the Dynamic-Qt.app bundle. If you are building dynamicd or Dynamic-Qt for others, your build machine should be set up as follows for maximum compatibility: All dependencies should be compiled with these flags: -mmacosx-version-min=10.7 -arch x86_64 -isysroot $(xcode-select --print-path)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk Once dependencies are compiled, see release-process.md for how the Dynamic-Qt.app bundle is packaged and signed to create the .dmg disk image that is distributed. Running It's now available at ./dynamicd , provided that you are still in the src directory. We have to first create the RPC configuration file, though. Run ./dynamicd to get the filename where it should be put, or just try these commands: echo -e \"rpcuser=dynamicrpc\\nrpcpassword=$(xxd -l 16 -p /dev/urandom)\" > \"/Users/${USER}/Library/Application Support/Dynamic/dynamic.conf\" chmod 600 \"/Users/${USER}/Library/Application Support/Dynamic/dynamic.conf\" The next time you run it, it will start downloading the blockchain, but it won't output anything while it's doing this. This process may take several hours; you can monitor its process by looking at the debug.log file, like this: tail -f $HOME/Library/Application\\ Support/Dynamic/debug.log Other commands: ./dynamicd -daemon # to start the dynamic daemon. ./dynamic-cli --help # for a list of command-line options. ./dynamic-cli help # When the daemon is running, to get a list of RPC commands","title":"Dynamic build guide on OSX"},{"location":"Dynamic OSX Build Guide/#mac-os-x-build-instructions-and-notes","text":"This guide will show you how to build dynamicd (headless client) for OSX.","title":"Mac OS X Build Instructions and Notes"},{"location":"Dynamic OSX Build Guide/#notes","text":"Tested on OS X 10.7 through 10.12.6 on 64-bit Intel processors only. All of the commands should be executed in a Terminal application. The built-in one is located in /Applications/Utilities .","title":"Notes"},{"location":"Dynamic OSX Build Guide/#preparation","text":"You need to install XCode with all the options checked so that the compiler and everything is available in /usr not just /Developer. XCode should be available on your OS X installation media, but if not, you can get the current version from https://developer.apple.com/xcode/. If you install Xcode 4.3 or later, you'll need to install its command line tools. This can be done in Xcode > Preferences > Downloads > Components and generally must be re-done or updated every time Xcode is updated. There's also an assumption that you already have git installed. If not, it's the path of least resistance to install Github for Mac (OS X 10.7+) or Git for OS X . It is also available via Homebrew. You will also need to install Homebrew in order to install library dependencies. The installation of the actual dependencies is covered in the Instructions sections below.","title":"Preparation"},{"location":"Dynamic OSX Build Guide/#instructions-homebrew","text":"","title":"Instructions: Homebrew"},{"location":"Dynamic OSX Build Guide/#install-dependencies-using-homebrew","text":"$ brew install git autoconf automake libevent libtool boost --c++11 miniupnpc openssl pkg-config qt berkeley-db4 $ brew install homebrew/versions/protobuf260 --c++11 Because of OS X having LibreSSL installed we have to tell the compiler where OpenSSL is located: $ export LDFLAGS=-L/usr/local/opt/openssl/lib $ export CPPFLAGS=-I/usr/local/opt/openssl/include or you can instead symlink your newly installed OpenSSL: $ sudo ln -s openssl-1.0.2j /usr/local/openssl (the above version of OpenSSL may differ to the one you have installed, amend to suit) After exiting you will want to symlink berkeley-db4 and qt: $ brew link berkeley-db4 --force $ brew link qt --force $ brew link boost --c++11 --force","title":"Install dependencies using Homebrew"},{"location":"Dynamic OSX Build Guide/#building-dynamicd","text":"Clone the github tree to get the source code and go into the directory. git clone https://github.com/duality-solutions/dynamic.git cd dynamic Build dynamicd: ./autogen.sh ./configure make It is also a good idea to build and run the unit tests: make check (Optional) You can also install dynamicd to your path: make install","title":"Building dynamicd"},{"location":"Dynamic OSX Build Guide/#use-qt-creator-as-ide","text":"You can use Qt Creator as IDE, for debugging and for manipulating forms, etc. Download Qt Creator from http://www.qt.io/download/. Download the \"community edition\" and only install Qt Creator (uncheck the rest during the installation process). Make sure you installed everything through homebrew mentioned above Do a proper ./configure --with-gui=qt5 --enable-debug In Qt Creator do \"New Project\" -> Import Project -> Import Existing Project Enter \"dynamic-qt\" as project name, enter src/qt as location Leave the file selection as it is Confirm the \"summary page\" In the \"Projects\" tab select \"Manage Kits...\" Select the default \"Desktop\" kit and select \"Clang (x86 64bit in /usr/bin)\" as compiler Select LLDB as debugger (you might need to set the path to your installtion) Start debugging with Qt Creator","title":"Use Qt Creator as IDE"},{"location":"Dynamic OSX Build Guide/#creating-a-release-build","text":"You can ignore this section if you are building dynamicd for your own use. dynamicd/dynamic-cli binaries are not included in the Dynamic-Qt.app bundle. If you are building dynamicd or Dynamic-Qt for others, your build machine should be set up as follows for maximum compatibility: All dependencies should be compiled with these flags: -mmacosx-version-min=10.7 -arch x86_64 -isysroot $(xcode-select --print-path)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk Once dependencies are compiled, see release-process.md for how the Dynamic-Qt.app bundle is packaged and signed to create the .dmg disk image that is distributed.","title":"Creating a release build"},{"location":"Dynamic OSX Build Guide/#running","text":"It's now available at ./dynamicd , provided that you are still in the src directory. We have to first create the RPC configuration file, though. Run ./dynamicd to get the filename where it should be put, or just try these commands: echo -e \"rpcuser=dynamicrpc\\nrpcpassword=$(xxd -l 16 -p /dev/urandom)\" > \"/Users/${USER}/Library/Application Support/Dynamic/dynamic.conf\" chmod 600 \"/Users/${USER}/Library/Application Support/Dynamic/dynamic.conf\" The next time you run it, it will start downloading the blockchain, but it won't output anything while it's doing this. This process may take several hours; you can monitor its process by looking at the debug.log file, like this: tail -f $HOME/Library/Application\\ Support/Dynamic/debug.log","title":"Running"},{"location":"Dynamic OSX Build Guide/#other-commands","text":"./dynamicd -daemon # to start the dynamic daemon. ./dynamic-cli --help # for a list of command-line options. ./dynamic-cli help # When the daemon is running, to get a list of RPC commands","title":"Other commands:"},{"location":"Dynamic README/","text":"Graph on Pull Request History Dynamic (DYN) v2.2.0.0 Copyright (c) 2016-2018 Duality Blockchain Solutions What is Dynamic ? Coin Suffix: DYN PoW Mining Algorithm: Argon2d PoW Difficulty Algorithm: Digishield V3 PoW Period: Unlimited PoW Target Spacing: 128 Seconds PoW Reward per Block: Controlled via Fluid Protocol PoW Reward Start Height: Block 5,137 Maturity: 10 Blocks PoW Blocks: ~675 per day Dynode Collateral Amount: 1000 DYN Dynode Min Confirmation: 10 Blocks Dynode Reward: Controlled via Fluid Protocol Dynode Reward Start Height: Block 10,273 Total Coins: 2 63 - 1 Min TX Fee: 0.0001 DYN Dynamic(DYN) is Duality \u2019s tokenized-currency provided with supply elasticity to ensure price stability for day to day transactions of end-users. Duality uses company proceeds to place buy back orders on the Dynamic(DYN) market to keep inflation within acceptable bounds. Dynamic(DYN) lays the groundwork for offering BaaS(Blockchain as a Service) by hosting a multitude of second tier nodes called Dynodes. Rewards can be adjusted through the 'Fluid Protocol' created by Duality to adjust to a maturing market. As a modern currency Dynamic(DYN) will be actively maintained to keep up with the latest market trends. Dynamic(DYN) features fast and Instantsend transactions at an affordable rate, also end-users that care for consumer privacy are able to anonymously transact using Privatesend. Dynamic(DYN) utilises Dynodes which are the 2nd tier of security, processing InstantSend transactions and providing fungibility via PrivateSend. MainNet Parameters P2P Port = 33300 RPC Port = 33350 Dynodes = 33300 Magic Bytes: 0x6e 0x71 0x84 0x90 TestNet Parameters P2P Port = 33400 RPC Port = 33450 Dynodes = 33400 Magic Bytes: 0x3f 0x42 0x25 0x50 RegTest Parameters P2P Port = 33500 RPC Port = 33550 Dynodes = 33500 Magic Bytes = 0x3f 0x42 0x25 0x4f UNIX BUILD NOTES Some notes on how to build Dynamic in Unix. Note Always use absolute paths to configure and compile Dynamic and the dependencies, for example, when specifying the the path of the dependency: ../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX Here BDB_PREFIX must absolute path - it is defined using $(pwd) which ensures the usage of the absolute path. To Build ./autogen.sh ./configure make make install # optional This will build dynamic-qt as well if the dependencies are met. Dependencies These dependencies are required: Library Purpose Description libssl SSL Support Secure communications libboost Boost C++ Library libevent Networking OS independent asynchronous networking Optional dependencies: Library Purpose Description miniupnpc UPnP Support Firewall-jumping support libdb4.8 Berkeley DB Wallet storage (only needed when wallet enabled) qt GUI GUI toolkit (only needed when GUI enabled) protobuf Payments in GUI Data interchange format used for payment protocol (only needed when GUI enabled) libqrencode QR codes in GUI Optional for generating QR codes (only needed when GUI enabled) libzmq3 ZMQ notification Optional, allows generating ZMQ notifications (requires ZMQ version >= 4.x) For the versions used in the release, see release-process.md under Fetch and build inputs . System requirements C++ compilers are memory-hungry. It is recommended to have at least 3 GB of memory available when compiling Dynamic. Dependency Build Instructions: Ubuntu & Debian Build requirements: sudo apt-get install build-essential libtool autotools-dev autoconf pkg-config libssl-dev libcrypto++-dev libevent-dev git for Ubuntu 12.04 and later or Debian 7 and later libboost-all-dev has to be installed: sudo apt-get install libboost-all-dev db4.8 packages are available here . You can add the repository using the following command: sudo add-apt-repository ppa:bitcoin/bitcoin sudo apt-get update Ubuntu 12.04 and later have packages for libdb5.1-dev and libdb5.1++-dev, but using these will break binary wallet compatibility, and is not recommended. for Debian 7 (Wheezy) and later: The oldstable repository contains db4.8 packages. Add the following line to /etc/apt/sources.list, replacing [mirror] with any official debian mirror. deb http://[mirror]/debian/ oldstable main To enable the change run sudo apt-get update for other Debian & Ubuntu (with ppa): sudo apt-get install libdb4.8-dev libdb4.8++-dev Optional (see --with-miniupnpc and --enable-upnp-default): sudo apt-get install libminiupnpc-dev ZMQ dependencies (provides ZMQ API 4.x): sudo apt-get install libzmq3-dev Dependencies for the GUI: Ubuntu & Debian If you want to build Dynamic-Qt, make sure that the required packages for Qt development are installed. Qt 5 is necessary to build the GUI. If both Qt 4 and Qt 5 are installed, Qt 5 will be used. Pass --with-gui=qt5 to configure to choose Qt5. To build without GUI pass --without-gui . For Qt 5 you need the following: sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler libcrypto++-dev libqrencode (optional) can be installed with: sudo apt-get install libqrencode-dev Once these are installed, they will be found by configure and a dynamic-qt executable will be built by default. Notes The release is built with GCC and then \"strip dynamicd\" to strip the debug symbols, which reduces the executable size by about 90%. miniupnpc miniupnpc may be used for UPnP port mapping. It can be downloaded from here . UPnP support is compiled in and turned off by default. See the configure options for upnp behavior desired: --without-miniupnpc No UPnP support miniupnp not required --disable-upnp-default (the default) UPnP support turned off by default at runtime --enable-upnp-default UPnP support turned on by default at runtime To build: tar -xzvf miniupnpc-1.6.tar.gz cd miniupnpc-1.6 make sudo su make install Berkeley DB It is recommended to use Berkeley DB 4.8. If you have to build it yourself: DYNAMIC_ROOT=$(pwd) # Pick some path to install BDB to, here we create a directory within the dynamic directory BDB_PREFIX=\"${DYNAMIC_ROOT}/db4\" mkdir -p $BDB_PREFIX # Fetch the source and verify that it is not tampered with wget 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz' echo '12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef db-4.8.30.NC.tar.gz' | sha256sum -c # -> db-4.8.30.NC.tar.gz: OK tar -xzvf db-4.8.30.NC.tar.gz # Build the library and install to our prefix cd db-4.8.30.NC/build_unix/ # Note: Do a static build so that it can be embedded into the exectuable, instead of having to find a .so at runtime ../dist/configure --prefix=/usr/local --enable-cxx make sudo make install # Configure Dynamic to use our own-built instance of BDB cd $DYNAMIC_ROOT ./configure (other args...) LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\" Note : You only need Berkeley DB if the wallet is enabled (see the section Disable-Wallet mode below). Boost If you need to build Boost yourself: sudo su ./bootstrap.sh ./bjam install Security To help make your Dynamic installation more secure by making certain attacks impossible to exploit even if a vulnerability is found, binaries are hardened by default. This can be disabled with: Hardening Flags: ./configure --enable-hardening ./configure --disable-hardening Hardening enables the following features: Position Independent Executable Build position independent code to take advantage of Address Space Layout Randomization offered by some kernels. An attacker who is able to cause execution of code at an arbitrary memory location is thwarted if he doesn't know where anything useful is located. The stack and heap are randomly located by default but this allows the code section to be randomly located as well. On an Amd64 processor where a library was not compiled with -fPIC, this will cause an error such as: \"relocation R_X86_64_32 against `......' can not be used when making a shared object;\" To test that you have built PIE executable, install scanelf, part of paxutils, and use: scanelf -e ./dynamicd The output should contain: TYPE ET_DYN Non-executable Stack If the stack is executable then trivial stack based buffer overflow exploits are possible if vulnerable buffers are found. By default, dynamic should be built with a non-executable stack but if one of the libraries it uses asks for an executable stack or someone makes a mistake and uses a compiler extension which requires an executable stack, it will silently build an executable without the non-executable stack protection. To verify that the stack is non-executable after compiling use: scanelf -e ./dynamicd the output should contain: STK/REL/PTL RW- R-- RW- The STK RW- means that the stack is readable and writeable but not executable. Disable-wallet mode When the intention is to run only a P2P node without a wallet, dynamic may be compiled in disable-wallet mode with: ./configure --disable-wallet In this case there is no dependency on Berkeley DB 4.8. Mining is also possible in disable-wallet mode, but only using the getblocktemplate RPC call not getwork . AVX2 Mining Optimisations For increased performance when mining, AVX2 optimisations can be enabled. At configure time: --enable-avx2 CPU's with AVX2 support: Intel Haswell processor, Q2 2013 Haswell E processor, Q3 2014 Broadwell processor, Q4 2014 Broadwell E processor, Q3 2016 Skylake processor, Q3 2015 Kaby Lake processor, Q3 2016(ULV mobile)/Q1 2017(desktop/mobile) Coffee Lake processor, expected in 2017 Cannonlake processor, expected in 2018 AMD Carrizo processor, Q2 2015 Ryzen processor, Q1 2017 AVX512 Mining Optimisations For increased performance when mining, AVX512 optimisations can be enabled. At configure time: --enable-avx512f CPU's with AVX512 support: Intel Xeon Phi x200/Knights Landing processor, 2016 Knights Mill processor, 2017 Skylake-SP processor, 2017 Skylake-X processor, 2017 Cannonlake processor, expected in 2018 Ice Lake processor, expected in 2018 Example Build Command Qt Wallet and Deamon, CLI version build: ./autogen.sh && ./configure --with-gui && make CLI and Deamon Only Buld: ./autogen.sh && ./configure --without-gui && make","title":"Dynamic"},{"location":"Dynamic README/#graph-on-pull-request-history","text":"","title":"Graph on Pull Request History"},{"location":"Dynamic README/#dynamic-dyn-v2200","text":"Copyright (c) 2016-2018 Duality Blockchain Solutions","title":"Dynamic (DYN) v2.2.0.0"},{"location":"Dynamic README/#what-is-dynamic","text":"Coin Suffix: DYN PoW Mining Algorithm: Argon2d PoW Difficulty Algorithm: Digishield V3 PoW Period: Unlimited PoW Target Spacing: 128 Seconds PoW Reward per Block: Controlled via Fluid Protocol PoW Reward Start Height: Block 5,137 Maturity: 10 Blocks PoW Blocks: ~675 per day Dynode Collateral Amount: 1000 DYN Dynode Min Confirmation: 10 Blocks Dynode Reward: Controlled via Fluid Protocol Dynode Reward Start Height: Block 10,273 Total Coins: 2 63 - 1 Min TX Fee: 0.0001 DYN Dynamic(DYN) is Duality \u2019s tokenized-currency provided with supply elasticity to ensure price stability for day to day transactions of end-users. Duality uses company proceeds to place buy back orders on the Dynamic(DYN) market to keep inflation within acceptable bounds. Dynamic(DYN) lays the groundwork for offering BaaS(Blockchain as a Service) by hosting a multitude of second tier nodes called Dynodes. Rewards can be adjusted through the 'Fluid Protocol' created by Duality to adjust to a maturing market. As a modern currency Dynamic(DYN) will be actively maintained to keep up with the latest market trends. Dynamic(DYN) features fast and Instantsend transactions at an affordable rate, also end-users that care for consumer privacy are able to anonymously transact using Privatesend. Dynamic(DYN) utilises Dynodes which are the 2nd tier of security, processing InstantSend transactions and providing fungibility via PrivateSend. MainNet Parameters P2P Port = 33300 RPC Port = 33350 Dynodes = 33300 Magic Bytes: 0x6e 0x71 0x84 0x90 TestNet Parameters P2P Port = 33400 RPC Port = 33450 Dynodes = 33400 Magic Bytes: 0x3f 0x42 0x25 0x50 RegTest Parameters P2P Port = 33500 RPC Port = 33550 Dynodes = 33500 Magic Bytes = 0x3f 0x42 0x25 0x4f","title":"What is Dynamic?"},{"location":"Dynamic README/#unix-build-notes","text":"Some notes on how to build Dynamic in Unix.","title":"UNIX BUILD NOTES"},{"location":"Dynamic README/#note","text":"Always use absolute paths to configure and compile Dynamic and the dependencies, for example, when specifying the the path of the dependency: ../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX Here BDB_PREFIX must absolute path - it is defined using $(pwd) which ensures the usage of the absolute path.","title":"Note"},{"location":"Dynamic README/#to-build","text":"./autogen.sh ./configure make make install # optional This will build dynamic-qt as well if the dependencies are met.","title":"To Build"},{"location":"Dynamic README/#dependencies","text":"These dependencies are required: Library Purpose Description libssl SSL Support Secure communications libboost Boost C++ Library libevent Networking OS independent asynchronous networking Optional dependencies: Library Purpose Description miniupnpc UPnP Support Firewall-jumping support libdb4.8 Berkeley DB Wallet storage (only needed when wallet enabled) qt GUI GUI toolkit (only needed when GUI enabled) protobuf Payments in GUI Data interchange format used for payment protocol (only needed when GUI enabled) libqrencode QR codes in GUI Optional for generating QR codes (only needed when GUI enabled) libzmq3 ZMQ notification Optional, allows generating ZMQ notifications (requires ZMQ version >= 4.x) For the versions used in the release, see release-process.md under Fetch and build inputs .","title":"Dependencies"},{"location":"Dynamic README/#system-requirements","text":"C++ compilers are memory-hungry. It is recommended to have at least 3 GB of memory available when compiling Dynamic.","title":"System requirements"},{"location":"Dynamic README/#dependency-build-instructions-ubuntu-debian","text":"Build requirements: sudo apt-get install build-essential libtool autotools-dev autoconf pkg-config libssl-dev libcrypto++-dev libevent-dev git for Ubuntu 12.04 and later or Debian 7 and later libboost-all-dev has to be installed: sudo apt-get install libboost-all-dev db4.8 packages are available here . You can add the repository using the following command: sudo add-apt-repository ppa:bitcoin/bitcoin sudo apt-get update Ubuntu 12.04 and later have packages for libdb5.1-dev and libdb5.1++-dev, but using these will break binary wallet compatibility, and is not recommended. for Debian 7 (Wheezy) and later: The oldstable repository contains db4.8 packages. Add the following line to /etc/apt/sources.list, replacing [mirror] with any official debian mirror. deb http://[mirror]/debian/ oldstable main To enable the change run sudo apt-get update for other Debian & Ubuntu (with ppa): sudo apt-get install libdb4.8-dev libdb4.8++-dev Optional (see --with-miniupnpc and --enable-upnp-default): sudo apt-get install libminiupnpc-dev ZMQ dependencies (provides ZMQ API 4.x): sudo apt-get install libzmq3-dev","title":"Dependency Build Instructions: Ubuntu &amp; Debian"},{"location":"Dynamic README/#dependencies-for-the-gui-ubuntu-debian","text":"If you want to build Dynamic-Qt, make sure that the required packages for Qt development are installed. Qt 5 is necessary to build the GUI. If both Qt 4 and Qt 5 are installed, Qt 5 will be used. Pass --with-gui=qt5 to configure to choose Qt5. To build without GUI pass --without-gui . For Qt 5 you need the following: sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler libcrypto++-dev libqrencode (optional) can be installed with: sudo apt-get install libqrencode-dev Once these are installed, they will be found by configure and a dynamic-qt executable will be built by default.","title":"Dependencies for the GUI: Ubuntu &amp; Debian"},{"location":"Dynamic README/#notes","text":"The release is built with GCC and then \"strip dynamicd\" to strip the debug symbols, which reduces the executable size by about 90%.","title":"Notes"},{"location":"Dynamic README/#miniupnpc","text":"miniupnpc may be used for UPnP port mapping. It can be downloaded from here . UPnP support is compiled in and turned off by default. See the configure options for upnp behavior desired: --without-miniupnpc No UPnP support miniupnp not required --disable-upnp-default (the default) UPnP support turned off by default at runtime --enable-upnp-default UPnP support turned on by default at runtime To build: tar -xzvf miniupnpc-1.6.tar.gz cd miniupnpc-1.6 make sudo su make install","title":"miniupnpc"},{"location":"Dynamic README/#berkeley-db","text":"It is recommended to use Berkeley DB 4.8. If you have to build it yourself: DYNAMIC_ROOT=$(pwd) # Pick some path to install BDB to, here we create a directory within the dynamic directory BDB_PREFIX=\"${DYNAMIC_ROOT}/db4\" mkdir -p $BDB_PREFIX # Fetch the source and verify that it is not tampered with wget 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz' echo '12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef db-4.8.30.NC.tar.gz' | sha256sum -c # -> db-4.8.30.NC.tar.gz: OK tar -xzvf db-4.8.30.NC.tar.gz # Build the library and install to our prefix cd db-4.8.30.NC/build_unix/ # Note: Do a static build so that it can be embedded into the exectuable, instead of having to find a .so at runtime ../dist/configure --prefix=/usr/local --enable-cxx make sudo make install # Configure Dynamic to use our own-built instance of BDB cd $DYNAMIC_ROOT ./configure (other args...) LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\" Note : You only need Berkeley DB if the wallet is enabled (see the section Disable-Wallet mode below).","title":"Berkeley DB"},{"location":"Dynamic README/#boost","text":"If you need to build Boost yourself: sudo su ./bootstrap.sh ./bjam install","title":"Boost"},{"location":"Dynamic README/#security","text":"To help make your Dynamic installation more secure by making certain attacks impossible to exploit even if a vulnerability is found, binaries are hardened by default. This can be disabled with: Hardening Flags: ./configure --enable-hardening ./configure --disable-hardening Hardening enables the following features: Position Independent Executable Build position independent code to take advantage of Address Space Layout Randomization offered by some kernels. An attacker who is able to cause execution of code at an arbitrary memory location is thwarted if he doesn't know where anything useful is located. The stack and heap are randomly located by default but this allows the code section to be randomly located as well. On an Amd64 processor where a library was not compiled with -fPIC, this will cause an error such as: \"relocation R_X86_64_32 against `......' can not be used when making a shared object;\" To test that you have built PIE executable, install scanelf, part of paxutils, and use: scanelf -e ./dynamicd The output should contain: TYPE ET_DYN Non-executable Stack If the stack is executable then trivial stack based buffer overflow exploits are possible if vulnerable buffers are found. By default, dynamic should be built with a non-executable stack but if one of the libraries it uses asks for an executable stack or someone makes a mistake and uses a compiler extension which requires an executable stack, it will silently build an executable without the non-executable stack protection. To verify that the stack is non-executable after compiling use: scanelf -e ./dynamicd the output should contain: STK/REL/PTL RW- R-- RW- The STK RW- means that the stack is readable and writeable but not executable.","title":"Security"},{"location":"Dynamic README/#disable-wallet-mode","text":"When the intention is to run only a P2P node without a wallet, dynamic may be compiled in disable-wallet mode with: ./configure --disable-wallet In this case there is no dependency on Berkeley DB 4.8. Mining is also possible in disable-wallet mode, but only using the getblocktemplate RPC call not getwork .","title":"Disable-wallet mode"},{"location":"Dynamic README/#avx2-mining-optimisations","text":"For increased performance when mining, AVX2 optimisations can be enabled. At configure time: --enable-avx2 CPU's with AVX2 support: Intel Haswell processor, Q2 2013 Haswell E processor, Q3 2014 Broadwell processor, Q4 2014 Broadwell E processor, Q3 2016 Skylake processor, Q3 2015 Kaby Lake processor, Q3 2016(ULV mobile)/Q1 2017(desktop/mobile) Coffee Lake processor, expected in 2017 Cannonlake processor, expected in 2018 AMD Carrizo processor, Q2 2015 Ryzen processor, Q1 2017","title":"AVX2 Mining Optimisations"},{"location":"Dynamic README/#avx512-mining-optimisations","text":"For increased performance when mining, AVX512 optimisations can be enabled. At configure time: --enable-avx512f CPU's with AVX512 support: Intel Xeon Phi x200/Knights Landing processor, 2016 Knights Mill processor, 2017 Skylake-SP processor, 2017 Skylake-X processor, 2017 Cannonlake processor, expected in 2018 Ice Lake processor, expected in 2018","title":"AVX512 Mining Optimisations"},{"location":"Dynamic README/#example-build-command","text":"Qt Wallet and Deamon, CLI version build: ./autogen.sh && ./configure --with-gui && make CLI and Deamon Only Buld: ./autogen.sh && ./configure --without-gui && make","title":"Example Build Command"},{"location":"Dynamic UNIX Build Guide/","text":"UNIX BUILD NOTES Some notes on how to build Dynamic in Unix. Note Always use absolute paths to configure and compile Dynamic and the dependencies, for example, when specifying the the path of the dependency: ../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX Here BDB_PREFIX must absolute path - it is defined using $(pwd) which ensures the usage of the absolute path. To Build ./autogen.sh ./configure make make install # optional This will build dynamic-qt as well if the dependencies are met. Dependencies These dependencies are required: Library Purpose Description libssl SSL Support Secure communications libboost Boost C++ Library libevent Networking OS independent asynchronous networking Optional dependencies: Library Purpose Description miniupnpc UPnP Support Firewall-jumping support libdb4.8 Berkeley DB Wallet storage (only needed when wallet enabled) qt GUI GUI toolkit (only needed when GUI enabled) protobuf Payments in GUI Data interchange format used for payment protocol (only needed when GUI enabled) libqrencode QR codes in GUI Optional for generating QR codes (only needed when GUI enabled) libzmq3 ZMQ notification Optional, allows generating ZMQ notifications (requires ZMQ version >= 4.x) For the versions used in the release, see release-process.md under Fetch and build inputs . System requirements C++ compilers are memory-hungry. It is recommended to have at least 3 GB of memory available when compiling Dynamic. Dependency Build Instructions: Ubuntu & Debian Build requirements: sudo apt-get install build-essential libtool autotools-dev autoconf pkg-config libssl-dev libcrypto++-dev libevent-dev git for Ubuntu 12.04 and later or Debian 7 and later libboost-all-dev has to be installed: sudo apt-get install libboost-all-dev db4.8 packages are available here . You can add the repository using the following command: sudo add-apt-repository ppa:bitcoin/bitcoin sudo apt-get update Ubuntu 12.04 and later have packages for libdb5.1-dev and libdb5.1++-dev, but using these will break binary wallet compatibility, and is not recommended. for Debian 7 (Wheezy) and later: The oldstable repository contains db4.8 packages. Add the following line to /etc/apt/sources.list, replacing [mirror] with any official debian mirror. deb http://[mirror]/debian/ oldstable main To enable the change run sudo apt-get update for other Debian & Ubuntu (with ppa): sudo apt-get install libdb4.8-dev libdb4.8++-dev Optional (see --with-miniupnpc and --enable-upnp-default): sudo apt-get install libminiupnpc-dev ZMQ dependencies (provides ZMQ API 4.x): sudo apt-get install libzmq3-dev Dependencies for the GUI: Ubuntu & Debian If you want to build Dynamic-Qt, make sure that the required packages for Qt development are installed. Qt 5 is necessary to build the GUI. If both Qt 4 and Qt 5 are installed, Qt 5 will be used. Pass --with-gui=qt5 to configure to choose Qt5. To build without GUI pass --without-gui . For Qt 5 you need the following: sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler libcrypto++-dev libqrencode (optional) can be installed with: sudo apt-get install libqrencode-dev Once these are installed, they will be found by configure and a dynamic-qt executable will be built by default. Notes The release is built with GCC and then \"strip dynamicd\" to strip the debug symbols, which reduces the executable size by about 90%. miniupnpc miniupnpc may be used for UPnP port mapping. It can be downloaded from here . UPnP support is compiled in and turned off by default. See the configure options for upnp behavior desired: --without-miniupnpc No UPnP support miniupnp not required --disable-upnp-default (the default) UPnP support turned off by default at runtime --enable-upnp-default UPnP support turned on by default at runtime To build: tar -xzvf miniupnpc-1.6.tar.gz cd miniupnpc-1.6 make sudo su make install Berkeley DB It is recommended to use Berkeley DB 4.8. If you have to build it yourself: DYNAMIC_ROOT=$(pwd) # Pick some path to install BDB to, here we create a directory within the dynamic directory BDB_PREFIX=\"${DYNAMIC_ROOT}/db4\" mkdir -p $BDB_PREFIX # Fetch the source and verify that it is not tampered with wget 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz' echo '12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef db-4.8.30.NC.tar.gz' | sha256sum -c # -> db-4.8.30.NC.tar.gz: OK tar -xzvf db-4.8.30.NC.tar.gz # Build the library and install to our prefix cd db-4.8.30.NC/build_unix/ # Note: Do a static build so that it can be embedded into the exectuable, instead of having to find a .so at runtime ../dist/configure --prefix=/usr/local --enable-cxx make sudo make install # Configure Dynamic to use our own-built instance of BDB cd $DYNAMIC_ROOT ./configure (other args...) LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\" Note : You only need Berkeley DB if the wallet is enabled (see the section Disable-Wallet mode below). Boost If you need to build Boost yourself: sudo su ./bootstrap.sh ./bjam install Security To help make your Dynamic installation more secure by making certain attacks impossible to exploit even if a vulnerability is found, binaries are hardened by default. This can be disabled with: Hardening Flags: ./configure --enable-hardening ./configure --disable-hardening Hardening enables the following features: Position Independent Executable Build position independent code to take advantage of Address Space Layout Randomization offered by some kernels. An attacker who is able to cause execution of code at an arbitrary memory location is thwarted if he doesn't know where anything useful is located. The stack and heap are randomly located by default but this allows the code section to be randomly located as well. On an Amd64 processor where a library was not compiled with -fPIC, this will cause an error such as: \"relocation R_X86_64_32 against `......' can not be used when making a shared object;\" To test that you have built PIE executable, install scanelf, part of paxutils, and use: scanelf -e ./dynamicd The output should contain: TYPE ET_DYN Non-executable Stack If the stack is executable then trivial stack based buffer overflow exploits are possible if vulnerable buffers are found. By default, dynamic should be built with a non-executable stack but if one of the libraries it uses asks for an executable stack or someone makes a mistake and uses a compiler extension which requires an executable stack, it will silently build an executable without the non-executable stack protection. To verify that the stack is non-executable after compiling use: scanelf -e ./dynamicd the output should contain: STK/REL/PTL RW- R-- RW- The STK RW- means that the stack is readable and writeable but not executable. Disable-wallet mode When the intention is to run only a P2P node without a wallet, dynamic may be compiled in disable-wallet mode with: ./configure --disable-wallet In this case there is no dependency on Berkeley DB 4.8. Mining is also possible in disable-wallet mode, but only using the getblocktemplate RPC call not getwork . Example Build Command Qt Wallet and Deamon, CLI version build: ./autogen.sh && ./configure --with-gui && make CLI and Deamon Only Buld: ./autogen.sh && ./configure --without-gui && make","title":"Dynamic build guide on Unix"},{"location":"Dynamic UNIX Build Guide/#unix-build-notes","text":"Some notes on how to build Dynamic in Unix.","title":"UNIX BUILD NOTES"},{"location":"Dynamic UNIX Build Guide/#note","text":"Always use absolute paths to configure and compile Dynamic and the dependencies, for example, when specifying the the path of the dependency: ../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX Here BDB_PREFIX must absolute path - it is defined using $(pwd) which ensures the usage of the absolute path.","title":"Note"},{"location":"Dynamic UNIX Build Guide/#to-build","text":"./autogen.sh ./configure make make install # optional This will build dynamic-qt as well if the dependencies are met.","title":"To Build"},{"location":"Dynamic UNIX Build Guide/#dependencies","text":"These dependencies are required: Library Purpose Description libssl SSL Support Secure communications libboost Boost C++ Library libevent Networking OS independent asynchronous networking Optional dependencies: Library Purpose Description miniupnpc UPnP Support Firewall-jumping support libdb4.8 Berkeley DB Wallet storage (only needed when wallet enabled) qt GUI GUI toolkit (only needed when GUI enabled) protobuf Payments in GUI Data interchange format used for payment protocol (only needed when GUI enabled) libqrencode QR codes in GUI Optional for generating QR codes (only needed when GUI enabled) libzmq3 ZMQ notification Optional, allows generating ZMQ notifications (requires ZMQ version >= 4.x) For the versions used in the release, see release-process.md under Fetch and build inputs .","title":"Dependencies"},{"location":"Dynamic UNIX Build Guide/#system-requirements","text":"C++ compilers are memory-hungry. It is recommended to have at least 3 GB of memory available when compiling Dynamic.","title":"System requirements"},{"location":"Dynamic UNIX Build Guide/#dependency-build-instructions-ubuntu-debian","text":"Build requirements: sudo apt-get install build-essential libtool autotools-dev autoconf pkg-config libssl-dev libcrypto++-dev libevent-dev git for Ubuntu 12.04 and later or Debian 7 and later libboost-all-dev has to be installed: sudo apt-get install libboost-all-dev db4.8 packages are available here . You can add the repository using the following command: sudo add-apt-repository ppa:bitcoin/bitcoin sudo apt-get update Ubuntu 12.04 and later have packages for libdb5.1-dev and libdb5.1++-dev, but using these will break binary wallet compatibility, and is not recommended. for Debian 7 (Wheezy) and later: The oldstable repository contains db4.8 packages. Add the following line to /etc/apt/sources.list, replacing [mirror] with any official debian mirror. deb http://[mirror]/debian/ oldstable main To enable the change run sudo apt-get update for other Debian & Ubuntu (with ppa): sudo apt-get install libdb4.8-dev libdb4.8++-dev Optional (see --with-miniupnpc and --enable-upnp-default): sudo apt-get install libminiupnpc-dev ZMQ dependencies (provides ZMQ API 4.x): sudo apt-get install libzmq3-dev","title":"Dependency Build Instructions: Ubuntu &amp; Debian"},{"location":"Dynamic UNIX Build Guide/#dependencies-for-the-gui-ubuntu-debian","text":"If you want to build Dynamic-Qt, make sure that the required packages for Qt development are installed. Qt 5 is necessary to build the GUI. If both Qt 4 and Qt 5 are installed, Qt 5 will be used. Pass --with-gui=qt5 to configure to choose Qt5. To build without GUI pass --without-gui . For Qt 5 you need the following: sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler libcrypto++-dev libqrencode (optional) can be installed with: sudo apt-get install libqrencode-dev Once these are installed, they will be found by configure and a dynamic-qt executable will be built by default.","title":"Dependencies for the GUI: Ubuntu &amp; Debian"},{"location":"Dynamic UNIX Build Guide/#notes","text":"The release is built with GCC and then \"strip dynamicd\" to strip the debug symbols, which reduces the executable size by about 90%.","title":"Notes"},{"location":"Dynamic UNIX Build Guide/#miniupnpc","text":"miniupnpc may be used for UPnP port mapping. It can be downloaded from here . UPnP support is compiled in and turned off by default. See the configure options for upnp behavior desired: --without-miniupnpc No UPnP support miniupnp not required --disable-upnp-default (the default) UPnP support turned off by default at runtime --enable-upnp-default UPnP support turned on by default at runtime To build: tar -xzvf miniupnpc-1.6.tar.gz cd miniupnpc-1.6 make sudo su make install","title":"miniupnpc"},{"location":"Dynamic UNIX Build Guide/#berkeley-db","text":"It is recommended to use Berkeley DB 4.8. If you have to build it yourself: DYNAMIC_ROOT=$(pwd) # Pick some path to install BDB to, here we create a directory within the dynamic directory BDB_PREFIX=\"${DYNAMIC_ROOT}/db4\" mkdir -p $BDB_PREFIX # Fetch the source and verify that it is not tampered with wget 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz' echo '12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef db-4.8.30.NC.tar.gz' | sha256sum -c # -> db-4.8.30.NC.tar.gz: OK tar -xzvf db-4.8.30.NC.tar.gz # Build the library and install to our prefix cd db-4.8.30.NC/build_unix/ # Note: Do a static build so that it can be embedded into the exectuable, instead of having to find a .so at runtime ../dist/configure --prefix=/usr/local --enable-cxx make sudo make install # Configure Dynamic to use our own-built instance of BDB cd $DYNAMIC_ROOT ./configure (other args...) LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\" Note : You only need Berkeley DB if the wallet is enabled (see the section Disable-Wallet mode below).","title":"Berkeley DB"},{"location":"Dynamic UNIX Build Guide/#boost","text":"If you need to build Boost yourself: sudo su ./bootstrap.sh ./bjam install","title":"Boost"},{"location":"Dynamic UNIX Build Guide/#security","text":"To help make your Dynamic installation more secure by making certain attacks impossible to exploit even if a vulnerability is found, binaries are hardened by default. This can be disabled with: Hardening Flags: ./configure --enable-hardening ./configure --disable-hardening Hardening enables the following features: Position Independent Executable Build position independent code to take advantage of Address Space Layout Randomization offered by some kernels. An attacker who is able to cause execution of code at an arbitrary memory location is thwarted if he doesn't know where anything useful is located. The stack and heap are randomly located by default but this allows the code section to be randomly located as well. On an Amd64 processor where a library was not compiled with -fPIC, this will cause an error such as: \"relocation R_X86_64_32 against `......' can not be used when making a shared object;\" To test that you have built PIE executable, install scanelf, part of paxutils, and use: scanelf -e ./dynamicd The output should contain: TYPE ET_DYN Non-executable Stack If the stack is executable then trivial stack based buffer overflow exploits are possible if vulnerable buffers are found. By default, dynamic should be built with a non-executable stack but if one of the libraries it uses asks for an executable stack or someone makes a mistake and uses a compiler extension which requires an executable stack, it will silently build an executable without the non-executable stack protection. To verify that the stack is non-executable after compiling use: scanelf -e ./dynamicd the output should contain: STK/REL/PTL RW- R-- RW- The STK RW- means that the stack is readable and writeable but not executable.","title":"Security"},{"location":"Dynamic UNIX Build Guide/#disable-wallet-mode","text":"When the intention is to run only a P2P node without a wallet, dynamic may be compiled in disable-wallet mode with: ./configure --disable-wallet In this case there is no dependency on Berkeley DB 4.8. Mining is also possible in disable-wallet mode, but only using the getblocktemplate RPC call not getwork .","title":"Disable-wallet mode"},{"location":"Dynamic UNIX Build Guide/#example-build-command","text":"Qt Wallet and Deamon, CLI version build: ./autogen.sh && ./configure --with-gui && make CLI and Deamon Only Buld: ./autogen.sh && ./configure --without-gui && make","title":"Example Build Command"},{"location":"List of Dynamic RPC Commands/","text":"List of Dynamic RPC Commands ============================ \ufffc Address Index getaddressbalance getaddressdeltas getaddressmempool getaddresstxids getaddressutxos Blockchain getbestblockhash getblock \"hash\" ( verbose ) getblockchaininfo getblockcount getblockhash index getblockhashes timestamp getblockheader \"hash\" ( verbose ) getblockheaders \"hash\" ( count verbose ) getchaintips ( count branchlen ) getdifficulty getmempoolinfo getrawmempool ( verbose ) getspentinfo gettxout \"txid\" n ( includemempool ) gettxoutproof [\"txid\",...] ( blockhash ) gettxoutsetinfo verifychain ( checklevel numblocks ) verifytxoutproof \"proof\" Control debug ( 0|1|addrman|alert|bench|coindb|db|lock|rand|rpc|selectcoins|mempool|mempoolrej|net|proxy|prune|http|libevent|tor|zmq|dynamic|privatesend|instantsend|dynode|spork|keepass|dnpayments|gobject ) getinfo getmemoryinfo help ( \"command\" ) stop DDNS name_delete [name] name_filter [regexp] [maxage=0] [from=0] [nb=0] [stat] [valuetype] name_history [name] [fullhistory] [valuetype] name_list [name] [valuetype] name_mempool [valuetype] name_new [name] [value] [name] [toaddress] [valuetype] name_scan [start-name] [max-returned] [max-value-length=-1] [valuetype] name_show [name] [valuetype] [filepath] name_update [name] [value] [days] [toaddress] [valuetype] Dynamic dnsync [status|next|reset] dynode \"command\"... dynodebroadcast \"command\"... dynodelist ( \"mode\" \"filter\" ) getdynoderewardstart [nHeight] getgovernanceinfo getpoolinfo getsuperblockbudget index gobject \"command\"... privatesend \"command\" spork [name] ([value]) voteraw [dynode-tx-hash] [dynode-tx-index] [governance-hash] [vote-signal] (yes|no|abstain) [time] [vote-sig] Fluid Protocol burndynamic \"amount\" \"account\" consenttoken \"address\" \"tokenkey\" getfluidhistory getfluidhistoryraw getfluidsovereigns gettime getrawpubkey \"address\" maketoken \"amount\" \"time\" \"receive address\" sendfluidtransaction \"hexstring\" signtoken \"address\" \"tokenkey\" verifyquorum \"tokenkey\" Generating generate numblocks getgenerate gethashespersec setgenerate generate ( genproclimit ) Hidden invalidateblock \"hash\" name_debug reconsiderblock \"hash\" resendwallettransactions setmocktime timestamp Mining getblocktemplate ( \"jsonrequestobject\" ) getmininginfo getnetworkhashps ( blocks height ) getpowrewardstart [nHeight] getwork ( \"data\" ) prioritisetransaction [txid] [priority delta] [fee delta] submitblock \"hexdata\" (\"jsonparametersobject\") Network addnode \"node\" \"add|remove|onetry\" clearbanned disconnectnode \"node\" getaddednodeinfo dns ( \"node\" ) getconnectioncount getnettotals getnetworkinfo getpeerinfo listbanned ping setban \"ip(/netmask)\" \"add|remove\" (bantime) (absolute) Raw Transactions createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] {\"address\":amount,\"data\":\"hex\",...} ( locktime ) decoderawtransaction \"hexstring\" decodescript \"hex\" fundrawtransaction \"hexstring\" includeWatching getrawtransaction \"txid\" ( verbose ) sendrawtransaction \"hexstring\" ( allowhighfees instantsend ) signrawtransaction \"hexstring\" ( [{\"txid\":\"id\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\"},...] [\"privatekey1\",...] sighashtype ) Utility Function createmultisig nrequired [\"key\",...] estimatefee nblocks estimatepriority nblocks estimatesmartfee nblocks estimatesmartpriority nblocks validateaddress \"dynamicaddress\" verifymessage \"dynamicaddress\" \"signature\" \"message\" Wallet abandontransaction \"txid\" addmultisigaddress nrequired [\"key\",...] ( \"account\" ) backupwallet \"destination\" dumphdinfo dumpprivkey \"dynamicaddress\" dumpwallet \"filename\" getaccount \"dynamicaddress\" getaccountaddress \"account\" getaddressesbyaccount \"account\" getbalance ( \"account\" minconf includeWatchonly ) getnewaddress ( \"account\" ) getrawchangeaddress getreceivedbyaccount \"account\" ( minconf ) getreceivedbyaddress \"dynamicaddress\" ( minconf ) gettransaction \"txid\" ( includeWatchonly ) getunconfirmedbalance getwalletinfo importaddress \"address\" ( \"label\" rescan p2sh ) importprivkey \"dynamicprivkey\" ( \"label\" rescan ) importpubkey \"pubkey\" ( \"label\" rescan ) importwallet \"filename\" instantsendtoaddress \"dynamicaddress\" amount ( \"comment\" \"comment-to\" subtractfeefromamount ) keepass keypoolrefill ( newsize ) listaccounts ( minconf includeWatchonly) listaddressgroupings listlockunspent listreceivedbyaccount ( minconf includeempty includeWatchonly) listreceivedbyaddress ( minconf includeempty includeWatchonly) listsinceblock ( \"blockhash\" target-confirmations includeWatchonly) listtransactions ( \"account\" count from includeWatchonly) listunspent ( minconf maxconf [\"address\",...] ) lockunspent unlock [{\"txid\":\"txid\",\"vout\":n},...] makekeypair [prefix] move \"fromaccount\" \"toaccount\" amount ( minconf \"comment\" ) sendfrom \"fromaccount\" \"todynamicaddress\" amount ( minconf \"comment\" \"comment-to\" ) sendmany \"fromaccount\" {\"address\":amount,...} ( minconf \"comment\" [\"address\",...] subtractfeefromamount use_is use_ps ) sendtoaddress \"dynamicaddress\" amount ( \"comment\" \"comment-to\" subtractfeefromamount use_is use_ps ) setaccount \"dynamicaddress\" \"account\" settxfee amount signmessage \"dynamicaddress\" \"message\" walletlock walletpassphrase \"passphrase\" timeout ( mixingonly ) walletpassphrasechange \"oldpassphrase\" \"newpassphrase\"","title":"Dynamic RPC Commands"},{"location":"List of Dynamic RPC Commands/#list-of-dynamic-rpc-commands","text":"============================ \ufffc","title":"List of Dynamic RPC Commands"},{"location":"List of Dynamic RPC Commands/#address-index","text":"getaddressbalance getaddressdeltas getaddressmempool getaddresstxids getaddressutxos","title":"Address Index"},{"location":"List of Dynamic RPC Commands/#blockchain","text":"getbestblockhash getblock \"hash\" ( verbose ) getblockchaininfo getblockcount getblockhash index getblockhashes timestamp getblockheader \"hash\" ( verbose ) getblockheaders \"hash\" ( count verbose ) getchaintips ( count branchlen ) getdifficulty getmempoolinfo getrawmempool ( verbose ) getspentinfo gettxout \"txid\" n ( includemempool ) gettxoutproof [\"txid\",...] ( blockhash ) gettxoutsetinfo verifychain ( checklevel numblocks ) verifytxoutproof \"proof\"","title":"Blockchain"},{"location":"List of Dynamic RPC Commands/#control","text":"debug ( 0|1|addrman|alert|bench|coindb|db|lock|rand|rpc|selectcoins|mempool|mempoolrej|net|proxy|prune|http|libevent|tor|zmq|dynamic|privatesend|instantsend|dynode|spork|keepass|dnpayments|gobject ) getinfo getmemoryinfo help ( \"command\" ) stop","title":"Control"},{"location":"List of Dynamic RPC Commands/#ddns","text":"name_delete [name] name_filter [regexp] [maxage=0] [from=0] [nb=0] [stat] [valuetype] name_history [name] [fullhistory] [valuetype] name_list [name] [valuetype] name_mempool [valuetype] name_new [name] [value] [name] [toaddress] [valuetype] name_scan [start-name] [max-returned] [max-value-length=-1] [valuetype] name_show [name] [valuetype] [filepath] name_update [name] [value] [days] [toaddress] [valuetype]","title":"DDNS"},{"location":"List of Dynamic RPC Commands/#dynamic","text":"dnsync [status|next|reset] dynode \"command\"... dynodebroadcast \"command\"... dynodelist ( \"mode\" \"filter\" ) getdynoderewardstart [nHeight] getgovernanceinfo getpoolinfo getsuperblockbudget index gobject \"command\"... privatesend \"command\" spork [name] ([value]) voteraw [dynode-tx-hash] [dynode-tx-index] [governance-hash] [vote-signal] (yes|no|abstain) [time] [vote-sig]","title":"Dynamic"},{"location":"List of Dynamic RPC Commands/#fluid-protocol","text":"burndynamic \"amount\" \"account\" consenttoken \"address\" \"tokenkey\" getfluidhistory getfluidhistoryraw getfluidsovereigns gettime getrawpubkey \"address\" maketoken \"amount\" \"time\" \"receive address\" sendfluidtransaction \"hexstring\" signtoken \"address\" \"tokenkey\" verifyquorum \"tokenkey\"","title":"Fluid Protocol"},{"location":"List of Dynamic RPC Commands/#generating","text":"generate numblocks getgenerate gethashespersec setgenerate generate ( genproclimit )","title":"Generating"},{"location":"List of Dynamic RPC Commands/#hidden","text":"invalidateblock \"hash\" name_debug reconsiderblock \"hash\" resendwallettransactions setmocktime timestamp","title":"Hidden"},{"location":"List of Dynamic RPC Commands/#mining","text":"getblocktemplate ( \"jsonrequestobject\" ) getmininginfo getnetworkhashps ( blocks height ) getpowrewardstart [nHeight] getwork ( \"data\" ) prioritisetransaction [txid] [priority delta] [fee delta] submitblock \"hexdata\" (\"jsonparametersobject\")","title":"Mining"},{"location":"List of Dynamic RPC Commands/#network","text":"addnode \"node\" \"add|remove|onetry\" clearbanned disconnectnode \"node\" getaddednodeinfo dns ( \"node\" ) getconnectioncount getnettotals getnetworkinfo getpeerinfo listbanned ping setban \"ip(/netmask)\" \"add|remove\" (bantime) (absolute)","title":"Network"},{"location":"List of Dynamic RPC Commands/#raw-transactions","text":"createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] {\"address\":amount,\"data\":\"hex\",...} ( locktime ) decoderawtransaction \"hexstring\" decodescript \"hex\" fundrawtransaction \"hexstring\" includeWatching getrawtransaction \"txid\" ( verbose ) sendrawtransaction \"hexstring\" ( allowhighfees instantsend ) signrawtransaction \"hexstring\" ( [{\"txid\":\"id\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\"},...] [\"privatekey1\",...] sighashtype )","title":"Raw Transactions"},{"location":"List of Dynamic RPC Commands/#utility-function","text":"createmultisig nrequired [\"key\",...] estimatefee nblocks estimatepriority nblocks estimatesmartfee nblocks estimatesmartpriority nblocks validateaddress \"dynamicaddress\" verifymessage \"dynamicaddress\" \"signature\" \"message\"","title":"Utility Function"},{"location":"List of Dynamic RPC Commands/#wallet","text":"abandontransaction \"txid\" addmultisigaddress nrequired [\"key\",...] ( \"account\" ) backupwallet \"destination\" dumphdinfo dumpprivkey \"dynamicaddress\" dumpwallet \"filename\" getaccount \"dynamicaddress\" getaccountaddress \"account\" getaddressesbyaccount \"account\" getbalance ( \"account\" minconf includeWatchonly ) getnewaddress ( \"account\" ) getrawchangeaddress getreceivedbyaccount \"account\" ( minconf ) getreceivedbyaddress \"dynamicaddress\" ( minconf ) gettransaction \"txid\" ( includeWatchonly ) getunconfirmedbalance getwalletinfo importaddress \"address\" ( \"label\" rescan p2sh ) importprivkey \"dynamicprivkey\" ( \"label\" rescan ) importpubkey \"pubkey\" ( \"label\" rescan ) importwallet \"filename\" instantsendtoaddress \"dynamicaddress\" amount ( \"comment\" \"comment-to\" subtractfeefromamount ) keepass keypoolrefill ( newsize ) listaccounts ( minconf includeWatchonly) listaddressgroupings listlockunspent listreceivedbyaccount ( minconf includeempty includeWatchonly) listreceivedbyaddress ( minconf includeempty includeWatchonly) listsinceblock ( \"blockhash\" target-confirmations includeWatchonly) listtransactions ( \"account\" count from includeWatchonly) listunspent ( minconf maxconf [\"address\",...] ) lockunspent unlock [{\"txid\":\"txid\",\"vout\":n},...] makekeypair [prefix] move \"fromaccount\" \"toaccount\" amount ( minconf \"comment\" ) sendfrom \"fromaccount\" \"todynamicaddress\" amount ( minconf \"comment\" \"comment-to\" ) sendmany \"fromaccount\" {\"address\":amount,...} ( minconf \"comment\" [\"address\",...] subtractfeefromamount use_is use_ps ) sendtoaddress \"dynamicaddress\" amount ( \"comment\" \"comment-to\" subtractfeefromamount use_is use_ps ) setaccount \"dynamicaddress\" \"account\" settxfee amount signmessage \"dynamicaddress\" \"message\" walletlock walletpassphrase \"passphrase\" timeout ( mixingonly ) walletpassphrasechange \"oldpassphrase\" \"newpassphrase\"","title":"Wallet"},{"location":"Sequence OSX Build Guide/","text":"Mac OS X Build Instructions and Notes This guide will show you how to build sequenced (headless client) for OSX. Notes Tested on OS X 10.7 through 10.12.3 on 64-bit Intel processors only. All of the commands should be executed in a Terminal application. The built-in one is located in /Applications/Utilities . Preparation You need to install XCode with all the options checked so that the compiler and everything is available in /usr not just /Developer. XCode should be available on your OS X installation media, but if not, you can get the current version from https://developer.apple.com/xcode/. If you install Xcode 4.3 or later, you'll need to install its command line tools. This can be done in Xcode > Preferences > Downloads > Components and generally must be re-done or updated every time Xcode is updated. After installing Xcode, start the application, accept the agreement and then close the application. Open terminal and enter: sudo xcode-select --install There's also an assumption that you already have git installed. If not, it's the path of least resistance to install Github for Mac (OS X 10.7+) or Git for OS X . It is also available via Homebrew. You will also need to install Homebrew in order to install library dependencies. The installation of the actual dependencies is covered in the Instructions sections below. Instructions: Homebrew Install dependencies using Homebrew $ brew install git autoconf automake libevent libtool boost --c++11 miniupnpc openssl pkg-config qt berkeley-db4 $ brew install homebrew/versions/protobuf260 --c++11 Because of OS X having LibreSSL installed we have to tell the compiler where OpenSSL is located: $ export LDFLAGS=-L/usr/local/opt/openssl/lib $ export CPPFLAGS=-I/usr/local/opt/openssl/include or you can instead symlink your newly installed OpenSSL: $ sudo ln -s openssl-1.0.2j /usr/local/openssl (the above version of OpenSSL may differ to the one you have installed, amend to suit) After exiting you will want to symlink berkeley-db4 and qt: $ brew link berkeley-db4 --force $ brew link qt --force $ brew link boost --c++11 --force Building sequenced Clone the github tree to get the source code and go into the directory. git clone https://github.com/duality-solutions/sequence.git cd sequence Build sequenced: ./autogen.sh ./configure make It is also a good idea to build and run the unit tests: make check (Optional) You can also install sequenced to your path: make install Use Qt Creator as IDE You can use Qt Creator as IDE, for debugging and for manipulating forms, etc. Download Qt Creator from http://www.qt.io/download/. Download the \"community edition\" and only install Qt Creator (uncheck the rest during the installation process). Make sure you installed everything through homebrew mentioned above Do a proper ./configure --with-gui=qt5 --enable-debug In Qt Creator do \"New Project\" -> Import Project -> Import Existing Project Enter \"sequence-qt\" as project name, enter src/qt as location Leave the file selection as it is Confirm the \"summary page\" In the \"Projects\" tab select \"Manage Kits...\" Select the default \"Desktop\" kit and select \"Clang (x86 64bit in /usr/bin)\" as compiler Select LLDB as debugger (you might need to set the path to your installtion) Start debugging with Qt Creator Creating a release build You can ignore this section if you are building sequenced for your own use. sequenced/sequence-cli binaries are not included in the Sequence-Qt.app bundle. If you are building sequenced or Sequence-Qt for others, your build machine should be set up as follows for maximum compatibility: All dependencies should be compiled with these flags: -mmacosx-version-min=10.7 -arch x86_64 -isysroot $(xcode-select --print-path)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk Once dependencies are compiled, see release-process.md for how the Sequence-Qt.app bundle is packaged and signed to create the .dmg disk image that is distributed. Running It's now available at ./sequenced , provided that you are still in the src directory. We have to first create the RPC configuration file, though. Run ./sequenced to get the filename where it should be put, or just try these commands: echo -e \"rpcuser=sequencerpc\\nrpcpassword=$(xxd -l 16 -p /dev/urandom)\" > \"/Users/${USER}/Library/Application Support/Sequence/sequence.conf\" chmod 600 \"/Users/${USER}/Library/Application Support/Sequence/sequence.conf\" The next time you run it, it will start downloading the blockchain, but it won't output anything while it's doing this. This process may take several hours; you can monitor its process by looking at the debug.log file, like this: tail -f $HOME/Library/Application\\ Support/Sequence/debug.log Other commands: ./sequenced -daemon # to start the sequence daemon. ./sequence-cli --help # for a list of command-line options. ./sequence-cli help # When the daemon is running, to get a list of RPC commands","title":"Sequence build guide OSX"},{"location":"Sequence OSX Build Guide/#mac-os-x-build-instructions-and-notes","text":"This guide will show you how to build sequenced (headless client) for OSX.","title":"Mac OS X Build Instructions and Notes"},{"location":"Sequence OSX Build Guide/#notes","text":"Tested on OS X 10.7 through 10.12.3 on 64-bit Intel processors only. All of the commands should be executed in a Terminal application. The built-in one is located in /Applications/Utilities .","title":"Notes"},{"location":"Sequence OSX Build Guide/#preparation","text":"You need to install XCode with all the options checked so that the compiler and everything is available in /usr not just /Developer. XCode should be available on your OS X installation media, but if not, you can get the current version from https://developer.apple.com/xcode/. If you install Xcode 4.3 or later, you'll need to install its command line tools. This can be done in Xcode > Preferences > Downloads > Components and generally must be re-done or updated every time Xcode is updated. After installing Xcode, start the application, accept the agreement and then close the application. Open terminal and enter: sudo xcode-select --install There's also an assumption that you already have git installed. If not, it's the path of least resistance to install Github for Mac (OS X 10.7+) or Git for OS X . It is also available via Homebrew. You will also need to install Homebrew in order to install library dependencies. The installation of the actual dependencies is covered in the Instructions sections below.","title":"Preparation"},{"location":"Sequence OSX Build Guide/#instructions-homebrew","text":"","title":"Instructions: Homebrew"},{"location":"Sequence OSX Build Guide/#install-dependencies-using-homebrew","text":"$ brew install git autoconf automake libevent libtool boost --c++11 miniupnpc openssl pkg-config qt berkeley-db4 $ brew install homebrew/versions/protobuf260 --c++11 Because of OS X having LibreSSL installed we have to tell the compiler where OpenSSL is located: $ export LDFLAGS=-L/usr/local/opt/openssl/lib $ export CPPFLAGS=-I/usr/local/opt/openssl/include or you can instead symlink your newly installed OpenSSL: $ sudo ln -s openssl-1.0.2j /usr/local/openssl (the above version of OpenSSL may differ to the one you have installed, amend to suit) After exiting you will want to symlink berkeley-db4 and qt: $ brew link berkeley-db4 --force $ brew link qt --force $ brew link boost --c++11 --force","title":"Install dependencies using Homebrew"},{"location":"Sequence OSX Build Guide/#building-sequenced","text":"Clone the github tree to get the source code and go into the directory. git clone https://github.com/duality-solutions/sequence.git cd sequence Build sequenced: ./autogen.sh ./configure make It is also a good idea to build and run the unit tests: make check (Optional) You can also install sequenced to your path: make install","title":"Building sequenced"},{"location":"Sequence OSX Build Guide/#use-qt-creator-as-ide","text":"You can use Qt Creator as IDE, for debugging and for manipulating forms, etc. Download Qt Creator from http://www.qt.io/download/. Download the \"community edition\" and only install Qt Creator (uncheck the rest during the installation process). Make sure you installed everything through homebrew mentioned above Do a proper ./configure --with-gui=qt5 --enable-debug In Qt Creator do \"New Project\" -> Import Project -> Import Existing Project Enter \"sequence-qt\" as project name, enter src/qt as location Leave the file selection as it is Confirm the \"summary page\" In the \"Projects\" tab select \"Manage Kits...\" Select the default \"Desktop\" kit and select \"Clang (x86 64bit in /usr/bin)\" as compiler Select LLDB as debugger (you might need to set the path to your installtion) Start debugging with Qt Creator","title":"Use Qt Creator as IDE"},{"location":"Sequence OSX Build Guide/#creating-a-release-build","text":"You can ignore this section if you are building sequenced for your own use. sequenced/sequence-cli binaries are not included in the Sequence-Qt.app bundle. If you are building sequenced or Sequence-Qt for others, your build machine should be set up as follows for maximum compatibility: All dependencies should be compiled with these flags: -mmacosx-version-min=10.7 -arch x86_64 -isysroot $(xcode-select --print-path)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk Once dependencies are compiled, see release-process.md for how the Sequence-Qt.app bundle is packaged and signed to create the .dmg disk image that is distributed.","title":"Creating a release build"},{"location":"Sequence OSX Build Guide/#running","text":"It's now available at ./sequenced , provided that you are still in the src directory. We have to first create the RPC configuration file, though. Run ./sequenced to get the filename where it should be put, or just try these commands: echo -e \"rpcuser=sequencerpc\\nrpcpassword=$(xxd -l 16 -p /dev/urandom)\" > \"/Users/${USER}/Library/Application Support/Sequence/sequence.conf\" chmod 600 \"/Users/${USER}/Library/Application Support/Sequence/sequence.conf\" The next time you run it, it will start downloading the blockchain, but it won't output anything while it's doing this. This process may take several hours; you can monitor its process by looking at the debug.log file, like this: tail -f $HOME/Library/Application\\ Support/Sequence/debug.log","title":"Running"},{"location":"Sequence OSX Build Guide/#other-commands","text":"./sequenced -daemon # to start the sequence daemon. ./sequence-cli --help # for a list of command-line options. ./sequence-cli help # When the daemon is running, to get a list of RPC commands","title":"Other commands:"},{"location":"Sequence README/","text":"Graph on Pull Request History Sequence (SEQ) v1.1.0.0 Copyright (c) 2016-2017 Duality Blockchain Solutions What is Sequence? Coin Suffix: SEQ PoW Algorithm: Scrypt PoW Period: 10,000 Blocks PoW Target Spacing: 60 Seconds PoW Difficulty Retarget: 10 Blocks PoW Reward per Block: 0 SEQ Full Confirmation: 10 Blocks PoS Algorithm: Blake2b PoS Target Spacing: 64 Seconds PoS Difficulty Retarget: 10 Blocks PoS Reward: 2 SEQ PoS Min: 1 Hour PoS Max: Unlimited Total Coins: 2 63 - 1 Block Size: 4MB Min TX Fee: 0.001 SEQ Sequence(SEQ) functions in many ways like Bitcoin(BTC) as a true decentralized autonomous currency. While Duality Blockchain Solutions lays claim to the blockchain, they do so to deploy a binary blockchain architecture in order to move price fluctuations away from [Dynamic(DYN)] and to Sequence(SEQ). Duality Blockchain Solutions does not have any control over the circulating supply and holds no pre-mined Sequence(SEQ). Sequence is a digital currency that enables instant payments to anyone, anywhere in the world. Sequence uses peer-to-peer technology to operate with no central authority (decentralisation): managing transactions and issuing currency (SEQ) are carried out collectively by the Sequence network. Sequence is the name of open source software which enables the use of the currency SEQ. MainNet Parameters P2P Port = 16662 RPC Port = 16663 TestNet Parameters P2P Port = 16664 RPC Port = 16665 UNIX BUILD NOTES Some notes on how to build Sequence in Unix. Building requirements for Unix based Systems : 3GB Note Always use absolute paths to configure and compile Sequence and the dependencies, for example, when specifying the the path of the dependency: ../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX Here BDB_PREFIX must absolute path - it is defined using $(pwd) which ensures the usage of the absolute path. To Build ./autogen.sh ./configure make make install # optional This will build sequence-qt as well if the dependencies are met. Dependencies These dependencies are required: Library Purpose Description libssl SSL Support Secure communications libboost Boost C++ Library Optional dependencies: Library Purpose Description miniupnpc UPnP Support Firewall-jumping support libdb4.8 Berkeley DB Wallet storage (only needed when wallet enabled) qt GUI GUI toolkit (only needed when GUI enabled) protobuf Payments in GUI Data interchange format used for payment protocol (only needed when GUI enabled) libqrencode QR codes in GUI Optional for generating QR codes (only needed when GUI enabled) For the versions used in the release, see release-process.md under Fetch and build inputs . System requirements C++ compilers are memory-hungry. It is recommended to have at least 1 GB of memory available when compiling Sequence. With 512MB of memory or less compilation will take much longer due to swap thrashing. Dependency Build Instructions: Ubuntu & Debian Build requirements: sudo apt-get install git build-essential libtool autotools-dev autoconf pkg-config libssl-dev libcrypto++-dev libevent-dev for Ubuntu 12.04 and later or Debian 7 and later libboost-all-dev has to be installed: sudo apt-get install libboost-all-dev db4.8 packages are available here . You can add the repository using the following command: sudo add-apt-repository ppa:bitcoin/bitcoin sudo apt-get update Ubuntu 12.04 and later have packages for libdb5.1-dev and libdb5.1++-dev, but using these will break binary wallet compatibility, and is not recommended. for Debian 7 (Wheezy) and later: The oldstable repository contains db4.8 packages. Add the following line to /etc/apt/sources.list, replacing [mirror] with any official debian mirror. deb http://[mirror]/debian/ oldstable main To enable the change run sudo apt-get update for other Debian & Ubuntu (with ppa): sudo apt-get install libdb4.8-dev libdb4.8++-dev Optional: sudo apt-get install libminiupnpc-dev (see --with-miniupnpc and --enable-upnp-default) Dependencies for the GUI: Ubuntu & Debian If you want to build Sequence-Qt, make sure that the required packages for Qt development are installed. Qt 5 is necessary to build the GUI. If both Qt 4 and Qt 5 are installed, Qt 5 will be used. Pass --with-gui=qt5 to configure to choose Qt5. To build without GUI pass --without-gui . For Qt 5 you need the following: sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler libcrypto++-dev libqrencode (optional) can be installed with: sudo apt-get install libqrencode-dev Once these are installed, they will be found by configure and a sequence-qt executable will be built by default. Notes The release is built with GCC and then \"strip sequenced\" to strip the debug symbols, which reduces the executable size by about 90%. miniupnpc miniupnpc may be used for UPnP port mapping. It can be downloaded from here . UPnP support is compiled in and turned off by default. See the configure options for upnp behavior desired: --without-miniupnpc No UPnP support miniupnp not required --disable-upnp-default (the default) UPnP support turned off by default at runtime --enable-upnp-default UPnP support turned on by default at runtime To build: tar -xzvf miniupnpc-1.6.tar.gz cd miniupnpc-1.6 make sudo su make install Berkeley DB It is recommended to use Berkeley DB 4.8. If you have to build it yourself: SEQUENCE_ROOT=$(pwd) # Pick some path to install BDB to, here we create a directory within the sequence directory BDB_PREFIX=\"${SEQUENCE_ROOT}/db4\" mkdir -p $BDB_PREFIX # Fetch the source and verify that it is not tampered with wget 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz' echo '12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef db-4.8.30.NC.tar.gz' | sha256sum -c # -> db-4.8.30.NC.tar.gz: OK tar -xzvf db-4.8.30.NC.tar.gz # Build the library and install to our prefix cd db-4.8.30.NC/build_unix/ # Note: Do a static build so that it can be embedded into the exectuable, instead of having to find a .so at runtime ../dist/configure --prefix=/usr/local --enable-cxx make sudo make install # Configure Sequence to use our own-built instance of BDB cd $SEQUENCE_ROOT ./configure (other args...) LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\" Note : You only need Berkeley DB if the wallet is enabled (see the section Disable-Wallet mode below). Boost If you need to build Boost yourself: sudo su ./bootstrap.sh ./bjam install Security To help make your Sequence installation more secure by making certain attacks impossible to exploit even if a vulnerability is found, binaries are hardened by default. This can be disabled with: Hardening Flags: ./configure --enable-hardening ./configure --disable-hardening Hardening enables the following features: Position Independent Executable Build position independent code to take advantage of Address Space Layout Randomization offered by some kernels. An attacker who is able to cause execution of code at an arbitrary memory location is thwarted if he doesn't know where anything useful is located. The stack and heap are randomly located by default but this allows the code section to be randomly located as well. On an Amd64 processor where a library was not compiled with -fPIC, this will cause an error such as: \"relocation R_X86_64_32 against `......' can not be used when making a shared object;\" To test that you have built PIE executable, install scanelf, part of paxutils, and use: scanelf -e ./sequenced The output should contain: TYPE ET_DYN Non-executable Stack If the stack is executable then trivial stack based buffer overflow exploits are possible if vulnerable buffers are found. By default, sequence should be built with a non-executable stack but if one of the libraries it uses asks for an executable stack or someone makes a mistake and uses a compiler extension which requires an executable stack, it will silently build an executable without the non-executable stack protection. To verify that the stack is non-executable after compiling use: scanelf -e ./sequenced the output should contain: STK/REL/PTL RW- R-- RW- The STK RW- means that the stack is readable and writeable but not executable. Disable-wallet mode When the intention is to run only a P2P node without a wallet, sequence may be compiled in disable-wallet mode with: ./configure --disable-wallet In this case there is no dependency on Berkeley DB 4.8. Mining is also possible in disable-wallet mode, but only using the getblocktemplate RPC call not getwork . Example Build Command Qt Wallet and Deamon, CLI version build: ./autogen.sh && ./configure --with-gui=qt5 && make CLI and Deamon Only Buld: ./autogen.sh && ./configure --without-gui && make","title":"Sequence"},{"location":"Sequence README/#graph-on-pull-request-history","text":"","title":"Graph on Pull Request History"},{"location":"Sequence README/#sequence-seq-v1100","text":"Copyright (c) 2016-2017 Duality Blockchain Solutions","title":"Sequence (SEQ) v1.1.0.0"},{"location":"Sequence README/#what-is-sequence","text":"Coin Suffix: SEQ PoW Algorithm: Scrypt PoW Period: 10,000 Blocks PoW Target Spacing: 60 Seconds PoW Difficulty Retarget: 10 Blocks PoW Reward per Block: 0 SEQ Full Confirmation: 10 Blocks PoS Algorithm: Blake2b PoS Target Spacing: 64 Seconds PoS Difficulty Retarget: 10 Blocks PoS Reward: 2 SEQ PoS Min: 1 Hour PoS Max: Unlimited Total Coins: 2 63 - 1 Block Size: 4MB Min TX Fee: 0.001 SEQ Sequence(SEQ) functions in many ways like Bitcoin(BTC) as a true decentralized autonomous currency. While Duality Blockchain Solutions lays claim to the blockchain, they do so to deploy a binary blockchain architecture in order to move price fluctuations away from [Dynamic(DYN)] and to Sequence(SEQ). Duality Blockchain Solutions does not have any control over the circulating supply and holds no pre-mined Sequence(SEQ). Sequence is a digital currency that enables instant payments to anyone, anywhere in the world. Sequence uses peer-to-peer technology to operate with no central authority (decentralisation): managing transactions and issuing currency (SEQ) are carried out collectively by the Sequence network. Sequence is the name of open source software which enables the use of the currency SEQ. MainNet Parameters P2P Port = 16662 RPC Port = 16663 TestNet Parameters P2P Port = 16664 RPC Port = 16665","title":"What is Sequence?"},{"location":"Sequence README/#unix-build-notes","text":"Some notes on how to build Sequence in Unix. Building requirements for Unix based Systems : 3GB","title":"UNIX BUILD NOTES"},{"location":"Sequence README/#note","text":"Always use absolute paths to configure and compile Sequence and the dependencies, for example, when specifying the the path of the dependency: ../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX Here BDB_PREFIX must absolute path - it is defined using $(pwd) which ensures the usage of the absolute path.","title":"Note"},{"location":"Sequence README/#to-build","text":"./autogen.sh ./configure make make install # optional This will build sequence-qt as well if the dependencies are met.","title":"To Build"},{"location":"Sequence README/#dependencies","text":"These dependencies are required: Library Purpose Description libssl SSL Support Secure communications libboost Boost C++ Library Optional dependencies: Library Purpose Description miniupnpc UPnP Support Firewall-jumping support libdb4.8 Berkeley DB Wallet storage (only needed when wallet enabled) qt GUI GUI toolkit (only needed when GUI enabled) protobuf Payments in GUI Data interchange format used for payment protocol (only needed when GUI enabled) libqrencode QR codes in GUI Optional for generating QR codes (only needed when GUI enabled) For the versions used in the release, see release-process.md under Fetch and build inputs .","title":"Dependencies"},{"location":"Sequence README/#system-requirements","text":"C++ compilers are memory-hungry. It is recommended to have at least 1 GB of memory available when compiling Sequence. With 512MB of memory or less compilation will take much longer due to swap thrashing.","title":"System requirements"},{"location":"Sequence README/#dependency-build-instructions-ubuntu-debian","text":"Build requirements: sudo apt-get install git build-essential libtool autotools-dev autoconf pkg-config libssl-dev libcrypto++-dev libevent-dev for Ubuntu 12.04 and later or Debian 7 and later libboost-all-dev has to be installed: sudo apt-get install libboost-all-dev db4.8 packages are available here . You can add the repository using the following command: sudo add-apt-repository ppa:bitcoin/bitcoin sudo apt-get update Ubuntu 12.04 and later have packages for libdb5.1-dev and libdb5.1++-dev, but using these will break binary wallet compatibility, and is not recommended. for Debian 7 (Wheezy) and later: The oldstable repository contains db4.8 packages. Add the following line to /etc/apt/sources.list, replacing [mirror] with any official debian mirror. deb http://[mirror]/debian/ oldstable main To enable the change run sudo apt-get update for other Debian & Ubuntu (with ppa): sudo apt-get install libdb4.8-dev libdb4.8++-dev Optional: sudo apt-get install libminiupnpc-dev (see --with-miniupnpc and --enable-upnp-default)","title":"Dependency Build Instructions: Ubuntu &amp; Debian"},{"location":"Sequence README/#dependencies-for-the-gui-ubuntu-debian","text":"If you want to build Sequence-Qt, make sure that the required packages for Qt development are installed. Qt 5 is necessary to build the GUI. If both Qt 4 and Qt 5 are installed, Qt 5 will be used. Pass --with-gui=qt5 to configure to choose Qt5. To build without GUI pass --without-gui . For Qt 5 you need the following: sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler libcrypto++-dev libqrencode (optional) can be installed with: sudo apt-get install libqrencode-dev Once these are installed, they will be found by configure and a sequence-qt executable will be built by default.","title":"Dependencies for the GUI: Ubuntu &amp; Debian"},{"location":"Sequence README/#notes","text":"The release is built with GCC and then \"strip sequenced\" to strip the debug symbols, which reduces the executable size by about 90%.","title":"Notes"},{"location":"Sequence README/#miniupnpc","text":"miniupnpc may be used for UPnP port mapping. It can be downloaded from here . UPnP support is compiled in and turned off by default. See the configure options for upnp behavior desired: --without-miniupnpc No UPnP support miniupnp not required --disable-upnp-default (the default) UPnP support turned off by default at runtime --enable-upnp-default UPnP support turned on by default at runtime To build: tar -xzvf miniupnpc-1.6.tar.gz cd miniupnpc-1.6 make sudo su make install","title":"miniupnpc"},{"location":"Sequence README/#berkeley-db","text":"It is recommended to use Berkeley DB 4.8. If you have to build it yourself: SEQUENCE_ROOT=$(pwd) # Pick some path to install BDB to, here we create a directory within the sequence directory BDB_PREFIX=\"${SEQUENCE_ROOT}/db4\" mkdir -p $BDB_PREFIX # Fetch the source and verify that it is not tampered with wget 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz' echo '12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef db-4.8.30.NC.tar.gz' | sha256sum -c # -> db-4.8.30.NC.tar.gz: OK tar -xzvf db-4.8.30.NC.tar.gz # Build the library and install to our prefix cd db-4.8.30.NC/build_unix/ # Note: Do a static build so that it can be embedded into the exectuable, instead of having to find a .so at runtime ../dist/configure --prefix=/usr/local --enable-cxx make sudo make install # Configure Sequence to use our own-built instance of BDB cd $SEQUENCE_ROOT ./configure (other args...) LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\" Note : You only need Berkeley DB if the wallet is enabled (see the section Disable-Wallet mode below).","title":"Berkeley DB"},{"location":"Sequence README/#boost","text":"If you need to build Boost yourself: sudo su ./bootstrap.sh ./bjam install","title":"Boost"},{"location":"Sequence README/#security","text":"To help make your Sequence installation more secure by making certain attacks impossible to exploit even if a vulnerability is found, binaries are hardened by default. This can be disabled with: Hardening Flags: ./configure --enable-hardening ./configure --disable-hardening Hardening enables the following features: Position Independent Executable Build position independent code to take advantage of Address Space Layout Randomization offered by some kernels. An attacker who is able to cause execution of code at an arbitrary memory location is thwarted if he doesn't know where anything useful is located. The stack and heap are randomly located by default but this allows the code section to be randomly located as well. On an Amd64 processor where a library was not compiled with -fPIC, this will cause an error such as: \"relocation R_X86_64_32 against `......' can not be used when making a shared object;\" To test that you have built PIE executable, install scanelf, part of paxutils, and use: scanelf -e ./sequenced The output should contain: TYPE ET_DYN Non-executable Stack If the stack is executable then trivial stack based buffer overflow exploits are possible if vulnerable buffers are found. By default, sequence should be built with a non-executable stack but if one of the libraries it uses asks for an executable stack or someone makes a mistake and uses a compiler extension which requires an executable stack, it will silently build an executable without the non-executable stack protection. To verify that the stack is non-executable after compiling use: scanelf -e ./sequenced the output should contain: STK/REL/PTL RW- R-- RW- The STK RW- means that the stack is readable and writeable but not executable.","title":"Security"},{"location":"Sequence README/#disable-wallet-mode","text":"When the intention is to run only a P2P node without a wallet, sequence may be compiled in disable-wallet mode with: ./configure --disable-wallet In this case there is no dependency on Berkeley DB 4.8. Mining is also possible in disable-wallet mode, but only using the getblocktemplate RPC call not getwork .","title":"Disable-wallet mode"},{"location":"Sequence README/#example-build-command","text":"Qt Wallet and Deamon, CLI version build: ./autogen.sh && ./configure --with-gui=qt5 && make CLI and Deamon Only Buld: ./autogen.sh && ./configure --without-gui && make","title":"Example Build Command"},{"location":"Sequence UNIX Build Guide/","text":"UNIX BUILD NOTES Some notes on how to build Sequence in Unix. Building requirements for Unix based Systems : 3GB Note Always use absolute paths to configure and compile Sequence and the dependencies, for example, when specifying the the path of the dependency: ../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX Here BDB_PREFIX must absolute path - it is defined using $(pwd) which ensures the usage of the absolute path. To Build ./autogen.sh ./configure make make install # optional This will build sequence-qt as well if the dependencies are met. Dependencies These dependencies are required: Library Purpose Description libssl SSL Support Secure communications libboost Boost C++ Library Optional dependencies: Library Purpose Description miniupnpc UPnP Support Firewall-jumping support libdb4.8 Berkeley DB Wallet storage (only needed when wallet enabled) qt GUI GUI toolkit (only needed when GUI enabled) protobuf Payments in GUI Data interchange format used for payment protocol (only needed when GUI enabled) libqrencode QR codes in GUI Optional for generating QR codes (only needed when GUI enabled) For the versions used in the release, see release-process.md under Fetch and build inputs . System requirements C++ compilers are memory-hungry. It is recommended to have at least 1 GB of memory available when compiling Sequence. With 512MB of memory or less compilation will take much longer due to swap thrashing. Dependency Build Instructions: Ubuntu & Debian Build requirements: sudo apt-get install git build-essential libtool autotools-dev autoconf pkg-config libssl-dev libcrypto++-dev libevent-dev for Ubuntu 12.04 and later or Debian 7 and later libboost-all-dev has to be installed: sudo apt-get install libboost-all-dev db4.8 packages are available here . You can add the repository using the following command: sudo add-apt-repository ppa:bitcoin/bitcoin sudo apt-get update Ubuntu 12.04 and later have packages for libdb5.1-dev and libdb5.1++-dev, but using these will break binary wallet compatibility, and is not recommended. for Debian 7 (Wheezy) and later: The oldstable repository contains db4.8 packages. Add the following line to /etc/apt/sources.list, replacing [mirror] with any official debian mirror. deb http://[mirror]/debian/ oldstable main To enable the change run sudo apt-get update for other Debian & Ubuntu (with ppa): sudo apt-get install libdb4.8-dev libdb4.8++-dev Optional: sudo apt-get install libminiupnpc-dev (see --with-miniupnpc and --enable-upnp-default) Dependencies for the GUI: Ubuntu & Debian If you want to build Sequence-Qt, make sure that the required packages for Qt development are installed. Qt 5 is necessary to build the GUI. If both Qt 4 and Qt 5 are installed, Qt 5 will be used. Pass --with-gui=qt5 to configure to choose Qt5. To build without GUI pass --without-gui . For Qt 5 you need the following: sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler libcrypto++-dev libqrencode (optional) can be installed with: sudo apt-get install libqrencode-dev Once these are installed, they will be found by configure and a sequence-qt executable will be built by default. Notes The release is built with GCC and then \"strip sequenced\" to strip the debug symbols, which reduces the executable size by about 90%. miniupnpc miniupnpc may be used for UPnP port mapping. It can be downloaded from here . UPnP support is compiled in and turned off by default. See the configure options for upnp behavior desired: --without-miniupnpc No UPnP support miniupnp not required --disable-upnp-default (the default) UPnP support turned off by default at runtime --enable-upnp-default UPnP support turned on by default at runtime To build: tar -xzvf miniupnpc-1.6.tar.gz cd miniupnpc-1.6 make sudo su make install Berkeley DB It is recommended to use Berkeley DB 4.8. If you have to build it yourself: SEQUENCE_ROOT=$(pwd) # Pick some path to install BDB to, here we create a directory within the sequence directory BDB_PREFIX=\"${SEQUENCE_ROOT}/db4\" mkdir -p $BDB_PREFIX # Fetch the source and verify that it is not tampered with wget 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz' echo '12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef db-4.8.30.NC.tar.gz' | sha256sum -c # -> db-4.8.30.NC.tar.gz: OK tar -xzvf db-4.8.30.NC.tar.gz # Build the library and install to our prefix cd db-4.8.30.NC/build_unix/ # Note: Do a static build so that it can be embedded into the exectuable, instead of having to find a .so at runtime ../dist/configure --prefix=/usr/local --enable-cxx make sudo make install # Configure Sequence to use our own-built instance of BDB cd $SEQUENCE_ROOT ./configure (other args...) LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\" Note : You only need Berkeley DB if the wallet is enabled (see the section Disable-Wallet mode below). Boost If you need to build Boost yourself: sudo su ./bootstrap.sh ./bjam install Security To help make your Sequence installation more secure by making certain attacks impossible to exploit even if a vulnerability is found, binaries are hardened by default. This can be disabled with: Hardening Flags: ./configure --enable-hardening ./configure --disable-hardening Hardening enables the following features: Position Independent Executable Build position independent code to take advantage of Address Space Layout Randomization offered by some kernels. An attacker who is able to cause execution of code at an arbitrary memory location is thwarted if he doesn't know where anything useful is located. The stack and heap are randomly located by default but this allows the code section to be randomly located as well. On an Amd64 processor where a library was not compiled with -fPIC, this will cause an error such as: \"relocation R_X86_64_32 against `......' can not be used when making a shared object;\" To test that you have built PIE executable, install scanelf, part of paxutils, and use: scanelf -e ./sequenced The output should contain: TYPE ET_DYN Non-executable Stack If the stack is executable then trivial stack based buffer overflow exploits are possible if vulnerable buffers are found. By default, sequence should be built with a non-executable stack but if one of the libraries it uses asks for an executable stack or someone makes a mistake and uses a compiler extension which requires an executable stack, it will silently build an executable without the non-executable stack protection. To verify that the stack is non-executable after compiling use: scanelf -e ./sequenced the output should contain: STK/REL/PTL RW- R-- RW- The STK RW- means that the stack is readable and writeable but not executable. Disable-wallet mode When the intention is to run only a P2P node without a wallet, sequence may be compiled in disable-wallet mode with: ./configure --disable-wallet In this case there is no dependency on Berkeley DB 4.8. Mining is also possible in disable-wallet mode, but only using the getblocktemplate RPC call not getwork . Example Build Command Qt Wallet and Deamon, CLI version build: ./autogen.sh && ./configure --with-gui=qt5 && make CLI and Deamon Only Buld: ./autogen.sh && ./configure --without-gui && make","title":"Sequence build guide UNIX"},{"location":"Sequence UNIX Build Guide/#unix-build-notes","text":"Some notes on how to build Sequence in Unix. Building requirements for Unix based Systems : 3GB","title":"UNIX BUILD NOTES"},{"location":"Sequence UNIX Build Guide/#note","text":"Always use absolute paths to configure and compile Sequence and the dependencies, for example, when specifying the the path of the dependency: ../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX Here BDB_PREFIX must absolute path - it is defined using $(pwd) which ensures the usage of the absolute path.","title":"Note"},{"location":"Sequence UNIX Build Guide/#to-build","text":"./autogen.sh ./configure make make install # optional This will build sequence-qt as well if the dependencies are met.","title":"To Build"},{"location":"Sequence UNIX Build Guide/#dependencies","text":"These dependencies are required: Library Purpose Description libssl SSL Support Secure communications libboost Boost C++ Library Optional dependencies: Library Purpose Description miniupnpc UPnP Support Firewall-jumping support libdb4.8 Berkeley DB Wallet storage (only needed when wallet enabled) qt GUI GUI toolkit (only needed when GUI enabled) protobuf Payments in GUI Data interchange format used for payment protocol (only needed when GUI enabled) libqrencode QR codes in GUI Optional for generating QR codes (only needed when GUI enabled) For the versions used in the release, see release-process.md under Fetch and build inputs .","title":"Dependencies"},{"location":"Sequence UNIX Build Guide/#system-requirements","text":"C++ compilers are memory-hungry. It is recommended to have at least 1 GB of memory available when compiling Sequence. With 512MB of memory or less compilation will take much longer due to swap thrashing.","title":"System requirements"},{"location":"Sequence UNIX Build Guide/#dependency-build-instructions-ubuntu-debian","text":"Build requirements: sudo apt-get install git build-essential libtool autotools-dev autoconf pkg-config libssl-dev libcrypto++-dev libevent-dev for Ubuntu 12.04 and later or Debian 7 and later libboost-all-dev has to be installed: sudo apt-get install libboost-all-dev db4.8 packages are available here . You can add the repository using the following command: sudo add-apt-repository ppa:bitcoin/bitcoin sudo apt-get update Ubuntu 12.04 and later have packages for libdb5.1-dev and libdb5.1++-dev, but using these will break binary wallet compatibility, and is not recommended. for Debian 7 (Wheezy) and later: The oldstable repository contains db4.8 packages. Add the following line to /etc/apt/sources.list, replacing [mirror] with any official debian mirror. deb http://[mirror]/debian/ oldstable main To enable the change run sudo apt-get update for other Debian & Ubuntu (with ppa): sudo apt-get install libdb4.8-dev libdb4.8++-dev Optional: sudo apt-get install libminiupnpc-dev (see --with-miniupnpc and --enable-upnp-default)","title":"Dependency Build Instructions: Ubuntu &amp; Debian"},{"location":"Sequence UNIX Build Guide/#dependencies-for-the-gui-ubuntu-debian","text":"If you want to build Sequence-Qt, make sure that the required packages for Qt development are installed. Qt 5 is necessary to build the GUI. If both Qt 4 and Qt 5 are installed, Qt 5 will be used. Pass --with-gui=qt5 to configure to choose Qt5. To build without GUI pass --without-gui . For Qt 5 you need the following: sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler libcrypto++-dev libqrencode (optional) can be installed with: sudo apt-get install libqrencode-dev Once these are installed, they will be found by configure and a sequence-qt executable will be built by default.","title":"Dependencies for the GUI: Ubuntu &amp; Debian"},{"location":"Sequence UNIX Build Guide/#notes","text":"The release is built with GCC and then \"strip sequenced\" to strip the debug symbols, which reduces the executable size by about 90%.","title":"Notes"},{"location":"Sequence UNIX Build Guide/#miniupnpc","text":"miniupnpc may be used for UPnP port mapping. It can be downloaded from here . UPnP support is compiled in and turned off by default. See the configure options for upnp behavior desired: --without-miniupnpc No UPnP support miniupnp not required --disable-upnp-default (the default) UPnP support turned off by default at runtime --enable-upnp-default UPnP support turned on by default at runtime To build: tar -xzvf miniupnpc-1.6.tar.gz cd miniupnpc-1.6 make sudo su make install","title":"miniupnpc"},{"location":"Sequence UNIX Build Guide/#berkeley-db","text":"It is recommended to use Berkeley DB 4.8. If you have to build it yourself: SEQUENCE_ROOT=$(pwd) # Pick some path to install BDB to, here we create a directory within the sequence directory BDB_PREFIX=\"${SEQUENCE_ROOT}/db4\" mkdir -p $BDB_PREFIX # Fetch the source and verify that it is not tampered with wget 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz' echo '12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef db-4.8.30.NC.tar.gz' | sha256sum -c # -> db-4.8.30.NC.tar.gz: OK tar -xzvf db-4.8.30.NC.tar.gz # Build the library and install to our prefix cd db-4.8.30.NC/build_unix/ # Note: Do a static build so that it can be embedded into the exectuable, instead of having to find a .so at runtime ../dist/configure --prefix=/usr/local --enable-cxx make sudo make install # Configure Sequence to use our own-built instance of BDB cd $SEQUENCE_ROOT ./configure (other args...) LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\" Note : You only need Berkeley DB if the wallet is enabled (see the section Disable-Wallet mode below).","title":"Berkeley DB"},{"location":"Sequence UNIX Build Guide/#boost","text":"If you need to build Boost yourself: sudo su ./bootstrap.sh ./bjam install","title":"Boost"},{"location":"Sequence UNIX Build Guide/#security","text":"To help make your Sequence installation more secure by making certain attacks impossible to exploit even if a vulnerability is found, binaries are hardened by default. This can be disabled with: Hardening Flags: ./configure --enable-hardening ./configure --disable-hardening Hardening enables the following features: Position Independent Executable Build position independent code to take advantage of Address Space Layout Randomization offered by some kernels. An attacker who is able to cause execution of code at an arbitrary memory location is thwarted if he doesn't know where anything useful is located. The stack and heap are randomly located by default but this allows the code section to be randomly located as well. On an Amd64 processor where a library was not compiled with -fPIC, this will cause an error such as: \"relocation R_X86_64_32 against `......' can not be used when making a shared object;\" To test that you have built PIE executable, install scanelf, part of paxutils, and use: scanelf -e ./sequenced The output should contain: TYPE ET_DYN Non-executable Stack If the stack is executable then trivial stack based buffer overflow exploits are possible if vulnerable buffers are found. By default, sequence should be built with a non-executable stack but if one of the libraries it uses asks for an executable stack or someone makes a mistake and uses a compiler extension which requires an executable stack, it will silently build an executable without the non-executable stack protection. To verify that the stack is non-executable after compiling use: scanelf -e ./sequenced the output should contain: STK/REL/PTL RW- R-- RW- The STK RW- means that the stack is readable and writeable but not executable.","title":"Security"},{"location":"Sequence UNIX Build Guide/#disable-wallet-mode","text":"When the intention is to run only a P2P node without a wallet, sequence may be compiled in disable-wallet mode with: ./configure --disable-wallet In this case there is no dependency on Berkeley DB 4.8. Mining is also possible in disable-wallet mode, but only using the getblocktemplate RPC call not getwork .","title":"Disable-wallet mode"},{"location":"Sequence UNIX Build Guide/#example-build-command","text":"Qt Wallet and Deamon, CLI version build: ./autogen.sh && ./configure --with-gui=qt5 && make CLI and Deamon Only Buld: ./autogen.sh && ./configure --without-gui && make","title":"Example Build Command"},{"location":"faq/","text":"FAQs The FAQs will be added here in the future but for now you can go to the Duality website here to view the FAQs.","title":"FAQ"},{"location":"faq/#faqs","text":"The FAQs will be added here in the future but for now you can go to the Duality website here to view the FAQs.","title":"FAQs"},{"location":"fluid-protocol/","text":"The Fluid Protocol Progressive updating of blockchain parameters without hard forking Executive Summary: Duality Blockchain Solutions LLC is a blockchain as a service (BaaS) provider for our clients. As such, Duality needs a way to self-regulate the decentralized blockchain. The fluid protocol is the answer to the problem mentioned above without going through contentious hard forking scenarios. The core of the protocol, as of right now, can generate or mint new coins, change Dynode rewards, and change miner rewards. In the future, other additional changes to the consensus rules will follow. Fluid Protocol Use Case The market demand for alternative methods of money is present and here to stay with the advent of the Internet, the 2008 market crash, and overall lack of government accountability. Digital currencies are the answer to the rising needs of the market. In late 2008-2009, Bitcoin was the response of unaccountable government from the brilliant mind of Satoshi Nakamoto. While fast transactions, no middle-men, and cryptographic proofs provided transparency in Bitcoin, it did not offer the same level of features that the market wanted. The market enjoys regulatory oversight, uniform rules among a shared jurisdiction, and arbitration. Duality Solutions is responding to such market needs with self-regulation, added arbitration features, and voluntary governance. Duality uniquely understands the shifting needs of the market investor, and the Fluid protocol is the solution to address those needs. The Fluid protocol is a mechanism to change the consensus rules of Duality\u2019s blockchain, Dynamic, to enforce self-regulation, change the reward amounts for Dynode holders and miners, and respond to arbitration. From a technical level, there are five sovereign wallets, think of them as arbitrators, who need three out of five sovereign wallets signatures to make a decision. In essence, a counterparty mechanism to prevent abuse from malicious users. In traditional banking and finance, banks and third parties are the ultimate approval mechanisms for transactions and changes within the financial network. The way to traverse and avoid the need for a final arbitrator is by spreading the power among multiple, vested parties. In digital currencies, this is called counterparty risk, and multi-signature wallets, which is an account where a specified amount of people out of the total amount are needed to move the funds out of the wallet, are the solution for addressing counterparty risk. The Fluid protocol is that for the Dynamic blockchain. Technical Documentation The writer assumes the reader has a basic understanding of the Dynamic blockchain, wallet addresses, and Dynodes. The Fluid protocol gives \u201csovereign\u201d wallet addresses control of the blockchain\u2019s parameters, multi-signature addresses for the blockchain, using specific transactions. Usually, it requires a hard fork to change the consensus rules for a blockchain such as changing the rewards. With Fluid, static consensus rules change when 3 out of 5 sovereign wallet addresses sign a Fluid transaction. Fluid transactions perform the following actions in the current implementation: Generate or mint new coins Change Dynode rewards Change miner rewards Future upgrades will allow Fluid to: Zero out a wallet address balance (by sending a negative txout). Ban a wallet address or Blockchain Directory Access Protocol (BDAP) account Adjust standard transaction and BDAP registration fees Add, remove, and swap sovereign address Workflow: Currently, there are only RPC commands to create and view Fluid transactions. To run the examples on testnet, you will need to import the private keys for at least three sovereign testnet wallet address. All Fluid transaction cost 100,000 DYN to run so you will need to verify you have the balance when you send the transaction in the last step. Fluid RPC Calls burndynamic \"amount\" \"account\" consenttoken \"address\" \"tokenkey\" getfluidhistory getfluidhistoryraw getfluidsovereigns gettime getrawpubkey \"address\" maketoken \"amount\" \"time\" \"receive address\" sendfluidtransaction \"hexstring\" signtoken \"address\" \"tokenkey\" verifyquorum \"tokenkey\" Fluid Protocol Code All of the code for the fluid protocol can be found in these files: fluid.h fluid.cpp rpcfluid.cpp Importing a Sovereign Wallet Address The Dynamic testnet has 5 initial sovereign wallet addresses. This example shows how to import the sovereign private key: DSCex4e189aULrig3nLd42gVf7AbjTwnP5 DMAh37n3RUdDxox3uiWAnc1zEPp5yFbHiL DN4KvqtXyygooPV3oha72TyBB5nqBbkxwj # Import DSCex4e189aULrig3nLd42gVf7AbjTwnP5 sovereign wallet address $./dynamic-cli importprivkey QVKXuZ2hSo2cT9BhkN3CApLuZYVsuzNvidJRt1ucyniHheZ2Pfq5 null # Import DMAh37n3RUdDxox3uiWAnc1zEPp5yFbHiL sovereign wallet address $./dynamic-cli importprivkey QU4VGDcVoej7nDZiyaSgoL7foG8xKiaVyk5odHnJdtyv4tYkmBw1 null # Import DN4KvqtXyygooPV3oha72TyBB5nqBbkxwj sovereign wallet address $./dynamic-cli importprivkey QWjTe6sCFVtKBsXfrYDyrHzn7eBeJktsQnWzfiANkMd9PhVM4Qnp null Fluid Transaction Structure scriptPubKey = <OP_Code> <Instructions> <pubkey1 + sig> <pubkey2 + sig> <pubkey3 + sig> OP_MINT <amount> <time> <receive address> <pubkey1 + sig> <pubkey2 + sig> <pubkey3 + sig> OP_REWARD_DYNODE <amount> <time> <pubkey1 + sig> <pubkey2 + sig> <pubkey3 + sig> OP_REWARD_MINING <amount> <time> <pubkey1 + sig> <pubkey2 + sig> <pubkey3 + sig> Where pubkey1, pubkey2, and pubkey3 are sovereign addresses. Minting new coins on testnet Example on how to mint 7,350 new DYN coins with fluid: # get current Epoch time $./dynamic-cli gettime 1531173072 # (Optional) Create a new wallet address. You can use an existing wallet address. $./dynamic-cli getnewaddress D5skCLLSk38sBNGKJYpaeTFkrboSzTTFdN # Create the fluid mint token using amount minted, the epoch time and receiving address # maketoken <amount> <time> <receive address> $./dynamic-cli maketoken 7350 1531173072 D5skCLLSk38sBNGKJYpaeTFkrboSzTTFdN 373335302431353331313733303732244435736B434C4C536B333873424E474B4A5970616554466B72626F537A545446644E # Sign the token with one of five sovereign address $./dynamic-cli signtoken DSCex4e189aULrig3nLd42gVf7AbjTwnP5 373335302431353331313733303732244435736B434C4C536B333873424E474B4A5970616554466B72626F537A545446644E 373335302431353331313733303732244435736B434C4C536B333873424E474B4A5970616554466B72626F537A545446644E4048353259324E4953705567372F33774D704977594238664963363331576A4E6938736752332B5A5A63647A5A504167482F593475655A5442684573414D3561307970314A706E64344A35543963784A68675961434655673D # Using the signed token above, consent the token with another sovereign address $./dynamic-cli consenttoken DMAh37n3RUdDxox3uiWAnc1zEPp5yFbHising the signed token above, consent the token with a third sovereign address $./dynamic-cli consenttoken DN4KvqtXyygooPV3oha72TyBB5nqBbkxwjheck if the consent token above if valid and has all signatures $./dynamic-cli verifyquorum 373335302431353331313733303732244435736B434C4C536B333873424E474B4A5970616554466B72626F537A545446644E4048353259324E4953705567372F33774D704977594238664963363331576A4E6938736752332B5A5A63647A5A504167482F593475655A5442684573414D3561307970314A706E64344A35543963784A68675961434655673D40482B664E4E70427063616754304156763046474A5A725959686E594D58777649584242596B7A5A585450614E564578356A6C3257617844623972784D432B7168626E4C4B7748792B61374166482F61464F4433627770413D40487733686154695A662F3959684A4D45336333563669594F7239477935716862787736384231384249767A544E792F4139307673363732383564373 Quorum is present! # Using the consent token above, send the fluid transaction. Fluid tx cost 100,000 DYN $./dynamic-cli sendfluidtransaction OP_MINT 373335302431353331313733303732244435736B434C4C536B333873424E474B4A5970616554466B72626F537A545446644E4048353259324E4953705567372F33774D704977594238664963363331576A4E6938736752332B5A5A63647A5A504167482F593475655A5442684573414D3561307970314A706E64344A35543963784A68675961434655673D40482B664E4E70427063616754304156763046474A5A725959686E594D58777649584242596B7A5A585450614E564578356A6C3257617844623972784D432B7168626E4C4B7748792B61374166482F61464F4433627770413D40487733686154695A662F3959684A4D45336333563669594F7239477935716862787736384231384249767A544E792F41393076733637323835643736742F43423434465A556353414D58554C61513941484C484F7362673D A56994dd9654290cda929f9c6a9ba27cadabeaff6cec45ceb6baa09533123371 # Wait for fluid transactions to confirm in 2 blocks. # Check fluid transactions $./dynamic-cli getfluidhistory [ { \"operation\": \"OP_MINT\", \"amount\": \"7350\", \"timestamp\": 1531173072, \"payment address\": \"D5skCLLSk38sBNGKJYpaeTFkrboSzTTFdN\", \"sovereign address 1\": \"DSCex4e189aULrig3nLd42gVf7AbjTwnP5\", \"sovereign address 2\": \"DMAh37n3RUdDxox3uiWAnc1zEPp5yFbHiL\", \"sovereign address 3\": \"DN4KvqtXyygooPV3oha72TyBB5nqBbkxwj\" } ] # View raw fluid transactions (hex results removed for readability) # Example fluid mint coin transaction $./dynamic-cli getrawtransaction A56994dd9654290cda929f9c6a9ba27cadabeaff6cec45ceb6baa09533123371 1 { \"txid\": \"a56994dd9654290cda929f9c6a9ba27cadabeaff6cec45ceb6baa09533123371\", \"size\": 523, \"version\": 1, \"locktime\": 7983, \"vin\": [ { \"txid\": \"f5bf2e220b67cb0a17e290be694fff2402b5538368c515602cb844f00565c7b2\", \"vout\": 1, \"scriptSig\": { \"asm\": \"3044022\u2026.\" }, \"sequence\": 4294967294 } ], \"vout\": [ { \"value\": 100000.00000000, \"valueSat\": 10000000000000, \"n\": 0, \"scriptPubKey\": { \"asm\": \"OP_MINT 373335302431353331313733303732244435736b434c4c536b333873424e474b4a5970616554466b72626f537a545446644e4048353259324e4953705567372f33774d704977594238664963363331576a4e6938736752332b5a5a63647a5a504167482f593475655a5442684573414d3561307970314a706e64344a35543963784a68675961434655673d40482b664e4e70427063616754304156763046474a5a725959686e594d58777649584242596b7a5a585450614e564578356a6c3257617844623972784d432b7168626e4c4b7748792b61374166482f61464f4433627770413d40487733686154695a662f3959684a4d45336333563669594f7239477935716862787736384231384249767a544e792f41393076733637323835643736742f43423434465a556353414d58554c61513941484c484f7362673d\", \"type\": \"nonstandard\" } }, { \"value\": 10399775.12883341, \"valueSat\": 1039977512883341, \"n\": 1, \"scriptPubKey\": { \"asm\": \"OP_DUP OP_HASH160 402327337a35255bbc8e49eb09ce2c9153cbf586 OP_EQUALVERIFY OP_CHECKSIG\", \"hex\": \"76a914402327337a35255bbc8e49eb09ce2c9153cbf58688ac\", \"reqSigs\": 1, \"type\": \"pubkeyhash\", \"addresses\": [ \"DAzDu1zDXXebz8GMj4c4ybjucVtis8U8iC\" ] } } ] } Changing Dynode Rewards on testnet Example on how to update the Dynode reward per block to 7.35 DYN coins with fluid: # get current Epoch time $./dynamic-cli gettime 1531173965 # Create the fluid mint token using amount minted, the epoch time and receiving address # maketoken <amount> <time> $./dynamic-cli maketoken 7.35 1531173965 372E33352431353331313733393635 # Sign the token with one of five sovereign address $./dynamic-cli signtoken DSCex4e189aULrig3nLd42gVf7AbjTwnP5 372E33352431353331313733393635 372E3335243135333131373339363540494E7645704F36634E454E58372B75474978723742333566794F507A3969623969615165365052384146415A5270786D7775454E636D62715030477441364969535A357746694B6C49426D4C65355A464268477A5276733D # Consent the token with a second sovereign address $./dynamic-cli consenttoken DMAh37n3RUdDxox3uiWAnc1zEPp5yFbHionsent the token with a second sovereign address $./dynamic-cli consenttoken DN4KvqtXyygooPV3oha72TyBB5nqBbkxwjheck if the consent token above if valid and has all signatures $./dynamic-cli verifyquorum 372E3335243135333131373339363540494E7645704F36634E454E58372B75474978723742333566794F507A3969623969615165365052384146415A5270786D7775454E636D62715030477441364969535A357746694B6C49426D4C65355A464268477A5276733D404943536753696C35356971456E39684B7938755236794E57527A2F59516E6B662B58626D4B50476C5937662F543337783939667A78783651616A3776372F4E6D4C683343704C78476B537846626C4353597A433835566F3D4048307763576B57422F7945764537535233597A3355576E566E71544B6C4D49466E6677774F6C3933384772704C4C6C724D67334D55715047475053654D756968436E675672794177534F356F55647448347474737370413D Quorum is present! # Using the consent token above, send the fluid transaction. Fluid tx cost 100,000 DYN $./dynamic-cli sendfluidtransactiona3022a62ccc9b7e29ada7a042491250ae3dd7bfcb0c023708ec8122ef89ab7 # Wait for fluid transactions to confirm in 2 blocks. # Check fluid transactions $./dynamic-cli getfluidhistory [ { \"operation\": \"OP_REWARD_DYNODE\", \"amount\": \"7.35\", \"timestamp\": 1531173965, \"sovereign address 1\": \"DSCex4e189aULrig3nLd42gVf7AbjTwnP5\", \"sovereign address 2\": \"DMAh37n3RUdDxox3uiWAnc1zEPp5yFbHiL\", \"sovereign address 3\": \"DN4KvqtXyygooPV3oha72TyBB5nqBbkxwj\" } ] # View raw fluid transactions # Example change Dynode reward transaction $./dynamic-cli getrawtransaction a56994dd9654290cda929f9c6a9ba27cadabeaff6cec45ceb6baa09533123371 1 { \"txid\": \"59a3022a62ccc9b7e29ada7a042491250ae3dd7bfcb0c023708ec8122ef89ab7\", \"size\": 488, \"version\": 1, \"locktime\": 7992, \"vin\": [ { \"txid\": \"a56994dd9654290cda929f9c6a9ba27cadabeaff6cec45ceb6baa09533123371\", \"vout\": 1, \"scriptSig\": { \"asm\": \"3044022\u2026.\" }, \"sequence\": 4294967294 } ], \"vout\": [ { \"value\": 100000.00000000, \"valueSat\": 10000000000000, \"n\": 0, \"scriptPubKey\": { \"asm\": \"OP_REWARD_DYNODE 372e3335243135333131373339363540494e7645704f36634e454e58372b75474978723742333566794f507a3969623969615165365052384146415a5270786d7775454e636d62715030477441364969535a357746694b6c49426d4c65355a464268477a5276733d404943536753696c35356971456e39684b7938755236794e57527a2f59516e6b662b58626d4b50476c5937662f543337783939667a78783651616a3776372f4e6d4c683343704c78476b537846626c4353597a433835566f3d4048307763576b57422f7945764537535233597a3355576e566e71544b6c4d49466e6677774f6c3933384772704c4c6c724d67334d55715047475053654d756968436e675672794177534f356f55647448347474737370413d\", \"type\": \"nonstandard\" } }, { \"value\": 10299775.12878451, \"valueSat\": 1029977512878451, \"n\": 1, \"scriptPubKey\": { \"asm\": \"OP_DUP OP_HASH160 012b485de08215c077e63931e2cdfee9529864eb OP_EQUALVERIFY OP_CHECKSIG\", \"hex\": \"76a914012b485de08215c077e63931e2cdfee9529864eb88ac\", \"reqSigs\": 1, \"type\": \"pubkeyhash\", \"addresses\": [ \"D5FH4nQrJs4u3NEY3bCp1rjMMoftrXFb7C\" ] } } ] } Changing Dynode Rewards on testnet Example on how to update the Dynamic mining reward per block to 1.9735 DYN coins with fluid: # get current Epoch time $./dynamic-cli gettime 1531174746 # Create the fluid mint token using amount minted, the epoch time and receiving address # maketoken <amount> <time> $./dynamic-cli maketoken 1.9735 1531174746 312E393733352431353331313734373436 # Sign the token with one of five sovereign address $./dynamic-cli signtoken DSCex4e189aULrig3nLd42gVf7AbjTwnP5 312E393733352431353331313734373436 312E393733352431353331313734373436404949574C73675864484C53617978794E7130486A3031696F7838646A6A4271774835375553463949686847304752577962592F6850596A57733850337874576D6770483234775477435172625970354538395573787A773D # Consent the token with a second sovereign address $./dynamic-cli consenttoken DMAh37n3RUdDxox3uiWAnc1zEPp5yFbHionsent the token with a second sovereign address $./dynamic-cli consenttoken DN4KvqtXyygooPV3oha72TyBB5nqBbkxwjheck if the consent token above if valid and has all signatures $./dynamic-cli verifyquorum 312E393733352431353331313734373436404949574C73675864484C53617978794E7130486A3031696F7838646A6A4271774835375553463949686847304752577962592F6850596A57733850337874576D6770483234775477435172625970354538395573787A773D40494331775748765A5A66732F6E775956515A5237584170726B76327A7869417A386B746A31374557416C44585A76317670332B432B56635A36324B61576938426F485953747A465332332F6E67494B2F667476444370383D40487A4267363275434439756767302B484553505A634375437A4146556478534834776148516B4D412B2B427645436868686E6738716D64732F4F54722B506630376F335A4531674446374846712B2B6B677034757463343D Quorum is present! # Using the consent token above, send the fluid transaction. Fluid tx cost 100,000 DYN $./dynamic-cli sendfluidtransactione02d255698577cc3671e3e80fc461ccddedf1a375541be6fe9140b1729ce # Wait for fluid transactions to confirm in 2 blocks. # Check fluid transactions $./dynamic-cli getfluidhistory [ { \"operation\": \"OP_REWARD_MINING\", \"amount\": \"1.9735\", \"timestamp\": 1531174746, \"sovereign address 1\": \"DSCex4e189aULrig3nLd42gVf7AbjTwnP5\", \"sovereign address 2\": \"DMAh37n3RUdDxox3uiWAnc1zEPp5yFbHiL\", \"sovereign address 3\": \"DN4KvqtXyygooPV3oha72TyBB5nqBbkxwj\" } ] # View raw fluid transactions # Example change mining reward transaction $./dynamic-cli getrawtransaction 8969e02d255698577cc3671e3e80fc461ccddedf1a375541be6fe9140b1729ce 1 { \"txid\": \"8969e02d255698577cc3671e3e80fc461ccddedf1a375541be6fe9140b1729ce\", \"size\": 490, \"version\": 1, \"locktime\": 8003, \"vin\": [ { \"txid\": \"59a3022a62ccc9b7e29ada7a042491250ae3dd7bfcb0c023708ec8122ef89ab7\", \"vout\": 1, \"scriptSig\": { \"asm\": \"304402207\u2026.\" }, \"sequence\": 4294967294 } ], \"vout\": [ { \"value\": 100000.00000000, \"valueSat\": 10000000000000, \"n\": 0, \"scriptPubKey\": { \"asm\": \"OP_REWARD_MINING 312e393733352431353331313734373436404949574c73675864484c53617978794e7130486a3031696f7838646a6a4271774835375553463949686847304752577962592f6850596a57733850337874576d6770483234775477435172625970354538395573787a773d40494331775748765a5a66732f6e775956515a5237584170726b76327a7869417a386b746a31374557416c44585a76317670332b432b56635a36324b61576938426f485953747a465332332f6e67494b2f667476444370383d40487a4267363275434439756767302b484553505a634375437a4146556478534834776148516b4d412b2b427645436868686e6738716d64732f4f54722b506630376f335a4531674446374846712b2b6b677034757463343d\", \"type\": \"nonstandard\" } }, { \"value\": 10199775.12873541, \"valueSat\": 1019977512873541, \"n\": 1, \"scriptPubKey\": { \"asm\": \"OP_DUP OP_HASH160 c8befd2bfdb259a19df401d0e7967382e9bd7321 OP_EQUALVERIFY OP_CHECKSIG\", \"hex\": \"76a914c8befd2bfdb259a19df401d0e7967382e9bd732188ac\", \"reqSigs\": 1, \"type\": \"pubkeyhash\", \"addresses\": [ \"DPSYUmb8o9oPJr9j8p6HVjfMkMnaJpGCUg\" ] } } ] }","title":"The Fluid Protocol"},{"location":"fluid-protocol/#the-fluid-protocol","text":"","title":"The Fluid Protocol"},{"location":"fluid-protocol/#progressive-updating-of-blockchain-parameters-without-hard-forking","text":"","title":"Progressive updating of blockchain parameters without hard forking"},{"location":"fluid-protocol/#executive-summary","text":"Duality Blockchain Solutions LLC is a blockchain as a service (BaaS) provider for our clients. As such, Duality needs a way to self-regulate the decentralized blockchain. The fluid protocol is the answer to the problem mentioned above without going through contentious hard forking scenarios. The core of the protocol, as of right now, can generate or mint new coins, change Dynode rewards, and change miner rewards. In the future, other additional changes to the consensus rules will follow.","title":"Executive Summary:"},{"location":"fluid-protocol/#fluid-protocol-use-case","text":"The market demand for alternative methods of money is present and here to stay with the advent of the Internet, the 2008 market crash, and overall lack of government accountability. Digital currencies are the answer to the rising needs of the market. In late 2008-2009, Bitcoin was the response of unaccountable government from the brilliant mind of Satoshi Nakamoto. While fast transactions, no middle-men, and cryptographic proofs provided transparency in Bitcoin, it did not offer the same level of features that the market wanted. The market enjoys regulatory oversight, uniform rules among a shared jurisdiction, and arbitration. Duality Solutions is responding to such market needs with self-regulation, added arbitration features, and voluntary governance. Duality uniquely understands the shifting needs of the market investor, and the Fluid protocol is the solution to address those needs. The Fluid protocol is a mechanism to change the consensus rules of Duality\u2019s blockchain, Dynamic, to enforce self-regulation, change the reward amounts for Dynode holders and miners, and respond to arbitration. From a technical level, there are five sovereign wallets, think of them as arbitrators, who need three out of five sovereign wallets signatures to make a decision. In essence, a counterparty mechanism to prevent abuse from malicious users. In traditional banking and finance, banks and third parties are the ultimate approval mechanisms for transactions and changes within the financial network. The way to traverse and avoid the need for a final arbitrator is by spreading the power among multiple, vested parties. In digital currencies, this is called counterparty risk, and multi-signature wallets, which is an account where a specified amount of people out of the total amount are needed to move the funds out of the wallet, are the solution for addressing counterparty risk. The Fluid protocol is that for the Dynamic blockchain.","title":"Fluid Protocol Use Case"},{"location":"fluid-protocol/#technical-documentation","text":"The writer assumes the reader has a basic understanding of the Dynamic blockchain, wallet addresses, and Dynodes. The Fluid protocol gives \u201csovereign\u201d wallet addresses control of the blockchain\u2019s parameters, multi-signature addresses for the blockchain, using specific transactions. Usually, it requires a hard fork to change the consensus rules for a blockchain such as changing the rewards. With Fluid, static consensus rules change when 3 out of 5 sovereign wallet addresses sign a Fluid transaction. Fluid transactions perform the following actions in the current implementation: Generate or mint new coins Change Dynode rewards Change miner rewards Future upgrades will allow Fluid to: Zero out a wallet address balance (by sending a negative txout). Ban a wallet address or Blockchain Directory Access Protocol (BDAP) account Adjust standard transaction and BDAP registration fees Add, remove, and swap sovereign address Workflow: Currently, there are only RPC commands to create and view Fluid transactions. To run the examples on testnet, you will need to import the private keys for at least three sovereign testnet wallet address. All Fluid transaction cost 100,000 DYN to run so you will need to verify you have the balance when you send the transaction in the last step.","title":"Technical Documentation"},{"location":"fluid-protocol/#fluid-rpc-calls","text":"burndynamic \"amount\" \"account\" consenttoken \"address\" \"tokenkey\" getfluidhistory getfluidhistoryraw getfluidsovereigns gettime getrawpubkey \"address\" maketoken \"amount\" \"time\" \"receive address\" sendfluidtransaction \"hexstring\" signtoken \"address\" \"tokenkey\" verifyquorum \"tokenkey\"","title":"Fluid RPC Calls"},{"location":"fluid-protocol/#fluid-protocol-code","text":"All of the code for the fluid protocol can be found in these files: fluid.h fluid.cpp rpcfluid.cpp","title":"Fluid Protocol Code"},{"location":"fluid-protocol/#importing-a-sovereign-wallet-address","text":"The Dynamic testnet has 5 initial sovereign wallet addresses. This example shows how to import the sovereign private key: DSCex4e189aULrig3nLd42gVf7AbjTwnP5 DMAh37n3RUdDxox3uiWAnc1zEPp5yFbHiL DN4KvqtXyygooPV3oha72TyBB5nqBbkxwj # Import DSCex4e189aULrig3nLd42gVf7AbjTwnP5 sovereign wallet address $./dynamic-cli importprivkey QVKXuZ2hSo2cT9BhkN3CApLuZYVsuzNvidJRt1ucyniHheZ2Pfq5 null # Import DMAh37n3RUdDxox3uiWAnc1zEPp5yFbHiL sovereign wallet address $./dynamic-cli importprivkey QU4VGDcVoej7nDZiyaSgoL7foG8xKiaVyk5odHnJdtyv4tYkmBw1 null # Import DN4KvqtXyygooPV3oha72TyBB5nqBbkxwj sovereign wallet address $./dynamic-cli importprivkey QWjTe6sCFVtKBsXfrYDyrHzn7eBeJktsQnWzfiANkMd9PhVM4Qnp null","title":"Importing a Sovereign Wallet Address"},{"location":"fluid-protocol/#fluid-transaction-structure","text":"scriptPubKey = <OP_Code> <Instructions> <pubkey1 + sig> <pubkey2 + sig> <pubkey3 + sig> OP_MINT <amount> <time> <receive address> <pubkey1 + sig> <pubkey2 + sig> <pubkey3 + sig> OP_REWARD_DYNODE <amount> <time> <pubkey1 + sig> <pubkey2 + sig> <pubkey3 + sig> OP_REWARD_MINING <amount> <time> <pubkey1 + sig> <pubkey2 + sig> <pubkey3 + sig> Where pubkey1, pubkey2, and pubkey3 are sovereign addresses.","title":"Fluid Transaction Structure"},{"location":"fluid-protocol/#minting-new-coins-on-testnet","text":"Example on how to mint 7,350 new DYN coins with fluid: # get current Epoch time $./dynamic-cli gettime 1531173072 # (Optional) Create a new wallet address. You can use an existing wallet address. $./dynamic-cli getnewaddress D5skCLLSk38sBNGKJYpaeTFkrboSzTTFdN # Create the fluid mint token using amount minted, the epoch time and receiving address # maketoken <amount> <time> <receive address> $./dynamic-cli maketoken 7350 1531173072 D5skCLLSk38sBNGKJYpaeTFkrboSzTTFdN 373335302431353331313733303732244435736B434C4C536B333873424E474B4A5970616554466B72626F537A545446644E # Sign the token with one of five sovereign address $./dynamic-cli signtoken DSCex4e189aULrig3nLd42gVf7AbjTwnP5 373335302431353331313733303732244435736B434C4C536B333873424E474B4A5970616554466B72626F537A545446644E 373335302431353331313733303732244435736B434C4C536B333873424E474B4A5970616554466B72626F537A545446644E4048353259324E4953705567372F33774D704977594238664963363331576A4E6938736752332B5A5A63647A5A504167482F593475655A5442684573414D3561307970314A706E64344A35543963784A68675961434655673D # Using the signed token above, consent the token with another sovereign address $./dynamic-cli consenttoken DMAh37n3RUdDxox3uiWAnc1zEPp5yFbHising the signed token above, consent the token with a third sovereign address $./dynamic-cli consenttoken DN4KvqtXyygooPV3oha72TyBB5nqBbkxwjheck if the consent token above if valid and has all signatures $./dynamic-cli verifyquorum 373335302431353331313733303732244435736B434C4C536B333873424E474B4A5970616554466B72626F537A545446644E4048353259324E4953705567372F33774D704977594238664963363331576A4E6938736752332B5A5A63647A5A504167482F593475655A5442684573414D3561307970314A706E64344A35543963784A68675961434655673D40482B664E4E70427063616754304156763046474A5A725959686E594D58777649584242596B7A5A585450614E564578356A6C3257617844623972784D432B7168626E4C4B7748792B61374166482F61464F4433627770413D40487733686154695A662F3959684A4D45336333563669594F7239477935716862787736384231384249767A544E792F4139307673363732383564373 Quorum is present! # Using the consent token above, send the fluid transaction. Fluid tx cost 100,000 DYN $./dynamic-cli sendfluidtransaction OP_MINT 373335302431353331313733303732244435736B434C4C536B333873424E474B4A5970616554466B72626F537A545446644E4048353259324E4953705567372F33774D704977594238664963363331576A4E6938736752332B5A5A63647A5A504167482F593475655A5442684573414D3561307970314A706E64344A35543963784A68675961434655673D40482B664E4E70427063616754304156763046474A5A725959686E594D58777649584242596B7A5A585450614E564578356A6C3257617844623972784D432B7168626E4C4B7748792B61374166482F61464F4433627770413D40487733686154695A662F3959684A4D45336333563669594F7239477935716862787736384231384249767A544E792F41393076733637323835643736742F43423434465A556353414D58554C61513941484C484F7362673D A56994dd9654290cda929f9c6a9ba27cadabeaff6cec45ceb6baa09533123371 # Wait for fluid transactions to confirm in 2 blocks. # Check fluid transactions $./dynamic-cli getfluidhistory [ { \"operation\": \"OP_MINT\", \"amount\": \"7350\", \"timestamp\": 1531173072, \"payment address\": \"D5skCLLSk38sBNGKJYpaeTFkrboSzTTFdN\", \"sovereign address 1\": \"DSCex4e189aULrig3nLd42gVf7AbjTwnP5\", \"sovereign address 2\": \"DMAh37n3RUdDxox3uiWAnc1zEPp5yFbHiL\", \"sovereign address 3\": \"DN4KvqtXyygooPV3oha72TyBB5nqBbkxwj\" } ] # View raw fluid transactions (hex results removed for readability) # Example fluid mint coin transaction $./dynamic-cli getrawtransaction A56994dd9654290cda929f9c6a9ba27cadabeaff6cec45ceb6baa09533123371 1 { \"txid\": \"a56994dd9654290cda929f9c6a9ba27cadabeaff6cec45ceb6baa09533123371\", \"size\": 523, \"version\": 1, \"locktime\": 7983, \"vin\": [ { \"txid\": \"f5bf2e220b67cb0a17e290be694fff2402b5538368c515602cb844f00565c7b2\", \"vout\": 1, \"scriptSig\": { \"asm\": \"3044022\u2026.\" }, \"sequence\": 4294967294 } ], \"vout\": [ { \"value\": 100000.00000000, \"valueSat\": 10000000000000, \"n\": 0, \"scriptPubKey\": { \"asm\": \"OP_MINT 373335302431353331313733303732244435736b434c4c536b333873424e474b4a5970616554466b72626f537a545446644e4048353259324e4953705567372f33774d704977594238664963363331576a4e6938736752332b5a5a63647a5a504167482f593475655a5442684573414d3561307970314a706e64344a35543963784a68675961434655673d40482b664e4e70427063616754304156763046474a5a725959686e594d58777649584242596b7a5a585450614e564578356a6c3257617844623972784d432b7168626e4c4b7748792b61374166482f61464f4433627770413d40487733686154695a662f3959684a4d45336333563669594f7239477935716862787736384231384249767a544e792f41393076733637323835643736742f43423434465a556353414d58554c61513941484c484f7362673d\", \"type\": \"nonstandard\" } }, { \"value\": 10399775.12883341, \"valueSat\": 1039977512883341, \"n\": 1, \"scriptPubKey\": { \"asm\": \"OP_DUP OP_HASH160 402327337a35255bbc8e49eb09ce2c9153cbf586 OP_EQUALVERIFY OP_CHECKSIG\", \"hex\": \"76a914402327337a35255bbc8e49eb09ce2c9153cbf58688ac\", \"reqSigs\": 1, \"type\": \"pubkeyhash\", \"addresses\": [ \"DAzDu1zDXXebz8GMj4c4ybjucVtis8U8iC\" ] } } ] }","title":"Minting new coins on testnet"},{"location":"fluid-protocol/#changing-dynode-rewards-on-testnet","text":"Example on how to update the Dynode reward per block to 7.35 DYN coins with fluid: # get current Epoch time $./dynamic-cli gettime 1531173965 # Create the fluid mint token using amount minted, the epoch time and receiving address # maketoken <amount> <time> $./dynamic-cli maketoken 7.35 1531173965 372E33352431353331313733393635 # Sign the token with one of five sovereign address $./dynamic-cli signtoken DSCex4e189aULrig3nLd42gVf7AbjTwnP5 372E33352431353331313733393635 372E3335243135333131373339363540494E7645704F36634E454E58372B75474978723742333566794F507A3969623969615165365052384146415A5270786D7775454E636D62715030477441364969535A357746694B6C49426D4C65355A464268477A5276733D # Consent the token with a second sovereign address $./dynamic-cli consenttoken DMAh37n3RUdDxox3uiWAnc1zEPp5yFbHiL 372E3335243135333131373339363540494E7645704F36634E454E58372B75474978723742333566794F507A3969623969615165365052384146415A5270786D7775454E636D62715030477441364969535A357746694B6C49426D4C65355A464268477A5276733D 372E3335243135333131373339363540494E7645704F36634E454E58372B75474978723742333566794F507A3969623969615165365052384146415A5270786D7775454E636D62715030477441364969535A357746694B6C49426D4C65355A464268477A5276733D404943536753696C35356971456E39684B7938755236794E57527A2F59516E6B662B58626D4B50476C5937662F543337783939667A78783651616A3776372F4E6D4C683343704C78476B537846626C4353597A433835566F3D # Consent the token with a second sovereign address $./dynamic-cli consenttoken DN4KvqtXyygooPV3oha72TyBB5nqBbkxwjheck if the consent token above if valid and has all signatures $./dynamic-cli verifyquorum 372E3335243135333131373339363540494E7645704F36634E454E58372B75474978723742333566794F507A3969623969615165365052384146415A5270786D7775454E636D62715030477441364969535A357746694B6C49426D4C65355A464268477A5276733D404943536753696C35356971456E39684B7938755236794E57527A2F59516E6B662B58626D4B50476C5937662F543337783939667A78783651616A3776372F4E6D4C683343704C78476B537846626C4353597A433835566F3D4048307763576B57422F7945764537535233597A3355576E566E71544B6C4D49466E6677774F6C3933384772704C4C6C724D67334D55715047475053654D756968436E675672794177534F356F55647448347474737370413D Quorum is present! # Using the consent token above, send the fluid transaction. Fluid tx cost 100,000 DYN $./dynamic-cli sendfluidtransactiona3022a62ccc9b7e29ada7a042491250ae3dd7bfcb0c023708ec8122ef89ab7 # Wait for fluid transactions to confirm in 2 blocks. # Check fluid transactions $./dynamic-cli getfluidhistory [ { \"operation\": \"OP_REWARD_DYNODE\", \"amount\": \"7.35\", \"timestamp\": 1531173965, \"sovereign address 1\": \"DSCex4e189aULrig3nLd42gVf7AbjTwnP5\", \"sovereign address 2\": \"DMAh37n3RUdDxox3uiWAnc1zEPp5yFbHiL\", \"sovereign address 3\": \"DN4KvqtXyygooPV3oha72TyBB5nqBbkxwj\" } ] # View raw fluid transactions # Example change Dynode reward transaction $./dynamic-cli getrawtransaction a56994dd9654290cda929f9c6a9ba27cadabeaff6cec45ceb6baa09533123371 1 { \"txid\": \"59a3022a62ccc9b7e29ada7a042491250ae3dd7bfcb0c023708ec8122ef89ab7\", \"size\": 488, \"version\": 1, \"locktime\": 7992, \"vin\": [ { \"txid\": \"a56994dd9654290cda929f9c6a9ba27cadabeaff6cec45ceb6baa09533123371\", \"vout\": 1, \"scriptSig\": { \"asm\": \"3044022\u2026.\" }, \"sequence\": 4294967294 } ], \"vout\": [ { \"value\": 100000.00000000, \"valueSat\": 10000000000000, \"n\": 0, \"scriptPubKey\": { \"asm\": \"OP_REWARD_DYNODE 372e3335243135333131373339363540494e7645704f36634e454e58372b75474978723742333566794f507a3969623969615165365052384146415a5270786d7775454e636d62715030477441364969535a357746694b6c49426d4c65355a464268477a5276733d404943536753696c35356971456e39684b7938755236794e57527a2f59516e6b662b58626d4b50476c5937662f543337783939667a78783651616a3776372f4e6d4c683343704c78476b537846626c4353597a433835566f3d4048307763576b57422f7945764537535233597a3355576e566e71544b6c4d49466e6677774f6c3933384772704c4c6c724d67334d55715047475053654d756968436e675672794177534f356f55647448347474737370413d\", \"type\": \"nonstandard\" } }, { \"value\": 10299775.12878451, \"valueSat\": 1029977512878451, \"n\": 1, \"scriptPubKey\": { \"asm\": \"OP_DUP OP_HASH160 012b485de08215c077e63931e2cdfee9529864eb OP_EQUALVERIFY OP_CHECKSIG\", \"hex\": \"76a914012b485de08215c077e63931e2cdfee9529864eb88ac\", \"reqSigs\": 1, \"type\": \"pubkeyhash\", \"addresses\": [ \"D5FH4nQrJs4u3NEY3bCp1rjMMoftrXFb7C\" ] } } ] }","title":"Changing Dynode Rewards on testnet"},{"location":"fluid-protocol/#changing-dynode-rewards-on-testnet_1","text":"Example on how to update the Dynamic mining reward per block to 1.9735 DYN coins with fluid: # get current Epoch time $./dynamic-cli gettime 1531174746 # Create the fluid mint token using amount minted, the epoch time and receiving address # maketoken <amount> <time> $./dynamic-cli maketoken 1.9735 1531174746 312E393733352431353331313734373436 # Sign the token with one of five sovereign address $./dynamic-cli signtoken DSCex4e189aULrig3nLd42gVf7AbjTwnP5 312E393733352431353331313734373436 312E393733352431353331313734373436404949574C73675864484C53617978794E7130486A3031696F7838646A6A4271774835375553463949686847304752577962592F6850596A57733850337874576D6770483234775477435172625970354538395573787A773D # Consent the token with a second sovereign address $./dynamic-cli consenttoken DMAh37n3RUdDxox3uiWAnc1zEPp5yFbHionsent the token with a second sovereign address $./dynamic-cli consenttoken DN4KvqtXyygooPV3oha72TyBB5nqBbkxwjheck if the consent token above if valid and has all signatures $./dynamic-cli verifyquorum 312E393733352431353331313734373436404949574C73675864484C53617978794E7130486A3031696F7838646A6A4271774835375553463949686847304752577962592F6850596A57733850337874576D6770483234775477435172625970354538395573787A773D40494331775748765A5A66732F6E775956515A5237584170726B76327A7869417A386B746A31374557416C44585A76317670332B432B56635A36324B61576938426F485953747A465332332F6E67494B2F667476444370383D40487A4267363275434439756767302B484553505A634375437A4146556478534834776148516B4D412B2B427645436868686E6738716D64732F4F54722B506630376F335A4531674446374846712B2B6B677034757463343D Quorum is present! # Using the consent token above, send the fluid transaction. Fluid tx cost 100,000 DYN $./dynamic-cli sendfluidtransactione02d255698577cc3671e3e80fc461ccddedf1a375541be6fe9140b1729ce # Wait for fluid transactions to confirm in 2 blocks. # Check fluid transactions $./dynamic-cli getfluidhistory [ { \"operation\": \"OP_REWARD_MINING\", \"amount\": \"1.9735\", \"timestamp\": 1531174746, \"sovereign address 1\": \"DSCex4e189aULrig3nLd42gVf7AbjTwnP5\", \"sovereign address 2\": \"DMAh37n3RUdDxox3uiWAnc1zEPp5yFbHiL\", \"sovereign address 3\": \"DN4KvqtXyygooPV3oha72TyBB5nqBbkxwj\" } ] # View raw fluid transactions # Example change mining reward transaction $./dynamic-cli getrawtransaction 8969e02d255698577cc3671e3e80fc461ccddedf1a375541be6fe9140b1729ce 1 { \"txid\": \"8969e02d255698577cc3671e3e80fc461ccddedf1a375541be6fe9140b1729ce\", \"size\": 490, \"version\": 1, \"locktime\": 8003, \"vin\": [ { \"txid\": \"59a3022a62ccc9b7e29ada7a042491250ae3dd7bfcb0c023708ec8122ef89ab7\", \"vout\": 1, \"scriptSig\": { \"asm\": \"304402207\u2026.\" }, \"sequence\": 4294967294 } ], \"vout\": [ { \"value\": 100000.00000000, \"valueSat\": 10000000000000, \"n\": 0, \"scriptPubKey\": { \"asm\": \"OP_REWARD_MINING 312e393733352431353331313734373436404949574c73675864484c53617978794e7130486a3031696f7838646a6a4271774835375553463949686847304752577962592f6850596a57733850337874576d6770483234775477435172625970354538395573787a773d40494331775748765a5a66732f6e775956515a5237584170726b76327a7869417a386b746a31374557416c44585a76317670332b432b56635a36324b61576938426f485953747a465332332f6e67494b2f667476444370383d40487a4267363275434439756767302b484553505a634375437a4146556478534834776148516b4d412b2b427645436868686e6738716d64732f4f54722b506630376f335a4531674446374846712b2b6b677034757463343d\", \"type\": \"nonstandard\" } }, { \"value\": 10199775.12873541, \"valueSat\": 1019977512873541, \"n\": 1, \"scriptPubKey\": { \"asm\": \"OP_DUP OP_HASH160 c8befd2bfdb259a19df401d0e7967382e9bd7321 OP_EQUALVERIFY OP_CHECKSIG\", \"hex\": \"76a914c8befd2bfdb259a19df401d0e7967382e9bd732188ac\", \"reqSigs\": 1, \"type\": \"pubkeyhash\", \"addresses\": [ \"DPSYUmb8o9oPJr9j8p6HVjfMkMnaJpGCUg\" ] } } ] }","title":"Changing Dynode Rewards on testnet"},{"location":"license/","text":"// Copyright (c) 2009-2018 Satoshi Nakamoto // Copyright (c) 2009-2018 The Bitcoin Developers // Copyright (c) 2014-2018 The Dash Core Developers // Copyright (c) 2016-2018 Duality Blockchain Solutions Developers Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"release-notes/","text":"Add Release notes here","title":"Release Notes"},{"location":"release-notes/#add-release-notes-here","text":"","title":"Add Release notes here"}]}